{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "workspace": {
      "type": "String"
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('workspace'), '/(SymantecEndpointProtection')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "eTag": "*",
        "displayName": "SymantecEndpointProtection",
        "category": "Microsoft Sentinel Parser",
        "FunctionAlias": "SymantecEndpointProtection",
        "query": "Syslog\n| where Computer in (\"server1\", \"server2\") // server1 and server2 are examples, replace this list with your SEP device names\n| extend ServerName = extract(@\"^([\\w\\-\\_]+)?(,|\\Site:)\",1,SyslogMessage)\n// Administrative Log Header\n| extend AdministrativeLogsParser = iif(SyslogMessage has (\"Admin:\"), extract_all(@\"Site:\\s([^,]+)\\,Server\\sName\\:\\s([^,]+)\\,Domain\\sName\\:\\s([^,]+)?\\,Admin\\:\\s([^,]+)?\\,Event\\sDescription\\:\\s([^#]+)?(#|$)\",dynamic([1,2,3,4,5,6,7]), SyslogMessage)[0], dynamic(\"\"))\n| extend LogType = iif(isnotempty(AdministrativeLogsParser),\"Administrative Logs\", \"\")\n// Agent System Log Header\n| extend AgentSystemLogsParser = iif(SyslogMessage has (\"Category:\"),extract_all(@'^([^,]+)\\,Category:\\s([\\d]+)\\,([^,]+)\\,\\\"?Event\\sDescription:\\s([^,]+\\\"?)(\\,Event time:\\s([^,]+)\\,Group Name:\\s([^,]+)$?)?',dynamic([1,2,3,4,6,7]), SyslogMessage)[0], dynamic(\"\"))\n| extend LogType = iif(isempty(LogType) and isnotempty(AgentSystemLogsParser),\"Agent System Logs\",LogType)\n// Agent Activity Log Header\n| extend AgentActivityLogsParser = iif(SyslogMessage has_all (\"Site:\",\"Server Name:\", \",Domain Name:\"),extract_all(@\"Site:\\s([^,]+)\\,Server\\sName\\:\\s([^,]+)\\,Domain\\sName\\:\\s([^,]+)?\\,([^,]+)?\\,([^,]+)?\\,([^,]+)?\\,([^,]+)?\",dynamic([1,2,3,4,5,6,7]), SyslogMessage)[0], dynamic(\"\"))\n| extend LogType = iif(isempty(LogType) and isnotempty(AgentActivityLogsParser),\"Agent Activity Logs\", LogType)\n// Agent Behavior Log Header\n| extend AgentBehaviorLogsParser = iif(SyslogMessage has (\"Begin:\"), extract_all(@\"^([^,]+)?\\,([^,]+)?\\,([^,]+)?\\,([^,]+)?\\,([^,]+)?\\,Begin:\\s([^,]+)?\\,End Time:\\s([^,]+)?\\,Rule:\\s([^,]+)?\\,(\\d+)?\\,([^,]+)?\\,([\\S\\s]+)\",dynamic([1,2,3,4,5,6,7,8,9,10,11]),SyslogMessage)[0], dynamic(\"\"))\n| extend AgentBehaviorLogsSubstring = tostring(AgentBehaviorLogsParser[10])\n| extend AgentBehaviorLogsParser2 = iif(SyslogMessage has_all (\"User Name:\",\"Domain Name:\", \"Action Type:\"),extract_all(@\"([^,]+)?\\,([^,]+)?\\,User Name:\\s([^,]+)?\\,Domain Name:\\s([^,]+)?\\,Action Type:\\s([^,]+)?\\,File size \\(bytes\\):\\s(\\d+)?\\,Device ID:\\s([^,]+)?\",dynamic([1,2,3,4,5,6,7,8]),AgentBehaviorLogsSubstring)[0], dynamic(\"\"))\n| extend LogType = iif(isempty(LogType) and isnotempty(AgentBehaviorLogsParser) and isnotempty(AgentBehaviorLogsParser2),\"Agent Behavior Logs\",LogType)\n// Agent Traffic Log Header\n| extend AgentTrafficLogsParser = iif(SyslogMessage has (\"Local Host IP:\"),extract_all(@\"^([^,]+)\\,Local Host IP:\\s([^,]+)?\\,Local Port:\\s([^,]+)?\\,Local Host MAC:\\s([^,]+)?\\,Remote Host IP:\\s([^,]+)?\\,Remote Host Name:\\s([^,]+)?\\,Remote Port:\\s([^,]+)?\\,Remote Host MAC:\\s([^,]+)?\\,([^,]+)?\\,([^,]+)?\\,Begin:\\s([^,]+)?\\,End Time:\\s([^,]+)?\\,([\\s\\S]+)\",dynamic([1,2,3,4,5,6,7,8,9,10,11,12,13]),SyslogMessage)[0], dynamic(\"\"))\n| extend AgentTrafficLogsSubstring  = tostring(AgentTrafficLogsParser[12])\n| extend AgentTrafficLogsParser2 = iif(SyslogMessage has(\"Occurrences:\"),extract_all(@\"Occurrences:\\s([^,]+)?\\,Application:\\s([^,]+)?\\,Rule:\\s([^,]+)?\\,Location:\\s([^,]+)?\\,User Name:\\s([^,]+)?\\,Domain Name:\\s([^,]+)?\\,Action:\\s([^,]+)?\\,SHA-256:\\s([^,]+)?\\,MD-5:\\s([^,]+)?\",dynamic([1,2,3,4,5,6,7,8,9,10,11,12]),AgentTrafficLogsSubstring)[0], dynamic(\"\"))\n| extend LogType = iif(isempty(LogType) and isnotempty(AgentTrafficLogsParser) and isnotempty(AgentTrafficLogsParser2),\"Agent Traffic Logs\",LogType)\n// Agent Security Log Header\n| extend AgentSecurityLogsParser = iif(SyslogMessage has (\"Local Host IP:\"),extract_all(@'^([^,]+)\\,(Event Description:\\s([^,]+)?|\\\"Event Description:\\s([^\"]+)?\\\")\\,Local Host IP:\\s([^,]+)?\\,Local Host MAC:\\s([^,]+)?\\,Remote Host Name:\\s([^,]+)?\\,Remote Host IP:\\s([^,]+)?\\,Remote Host MAC:\\s([^,]+)?\\,([^,]+)?\\,([^,]+)?\\,(Intrusion ID:\\s)?([^,]+)?\\,Begin:\\s([^,]+)?\\,End Time:\\s([^,]+)?\\,([\\s\\S]+)',dynamic([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]),SyslogMessage)[0], dynamic(\"\"))\n| extend  AgentSecurityLogsSubstring = tostring(AgentSecurityLogsParser[15])\n| extend AgentSecurityLogsParser2 = iif(SyslogMessage has (\"CIDS Signature SubID\"), extract_all(@'Occurrences:\\s([^,]+)?\\,Application:\\s([^,]+)?\\,Location:\\s([^,]+)?\\,User Name:\\s([^,]+)?\\,Domain Name:\\s([^,]+)?\\,Local Port:\\s([^,]+)?\\,Remote Port:\\s([^,]+)?\\,CIDS Signature ID:\\s([^,]+)?\\,CIDS Signature string:\\s([^,]+)?\\,CIDS Signature SubID:\\s([^,]+)?\\,\\\"?Intrusion URL:\\s([^\\,]+|[^\\\"]+)?\\\"?\\,Intrusion Payload URL:\\s([^,]+)?\\,SHA-256:\\s([^,]+)?\\,MD-5:\\s([^,]+)?',dynamic([1,2,3,4,5,6,7,8,9,10,11,12,13]),AgentSecurityLogsSubstring)[0],dynamic(\"\"))\n| extend LogType = iif(isempty(LogType) and isnotempty(AgentSecurityLogsParser) and isnotempty(AgentSecurityLogsParser2),\"Agent Security Logs\",LogType)\n// Agent Packet Log Header\n| extend AgentPacketLogsParser = iif(SyslogMessage has (\"Local Host IP:\"), extract_all(@\"Local Host IP:\\s([^,]+)?\\,Local Port:\\s([^,]+)?\\,Remote Host IP:\\s([^,]+)?\\,Remote Host Name:\\s([^,]+)?\\,Remote Port:\\s([^,]+)?\\,([^,]+)?\\,Application:\\s([^,]+)?\\,Action:\\s([^,]+)?\\,\",dynamic([1,2,3,4,5,6,7]), SyslogMessage)[0], dynamic(\"\"))\n| extend LogType = iif(isempty(LogType) and isnotempty(AgentPacketLogsParser),\"Agent Packet Logs\",LogType)\n// Agent Risk Log Header\n| extend AgentRiskLogsParser = iif(SyslogMessage has \"Risk name:\", extract_all(@'^([^,]+)\\,IP Address:\\s([^,]+)?\\,Computer name:\\s([^,]+)?\\,Source:\\s([^,]+)?\\,Risk name:\\s([^,]+)?\\,Occurrences:\\s([^,]+)?\\,(File path:\\s([^,]+)?|File path:\\s\\\"([^\"]+)\\\"?\\\")\\,Description:\\s([^,]+)?\\,Actual action:\\s([^,]+)?\\,Requested action:\\s([^,]+)?\\,Secondary action:\\s([^,]+)?\\,Event time:\\s([^,]+)?\\,Event Insert Time:\\s([^,]+)?\\,([\\s\\S]+)',dynamic([1,2,3,4,5,6,8,9,10,11,12,13,14,15,16]), SyslogMessage)[0], dynamic (\"\"))\n| extend AgentRiskLogsSubstring  = tostring(AgentRiskLogsParser[14])\n| extend AgentRiskLogsParser2 = iif(SyslogMessage has (\"URL Tracking Status:\"), extract_all(@\"^End Time:\\s([^,]+)?\\,Last update time:\\s([^,]+)?\\,Domain Name:\\s([^,]+)?\\,Group Name:\\s([^,]+)?\\,Server Name:\\s([^,]+)?\\,User Name:\\s([^,]+)?\\,Source Computer Name:\\s([^,]+)?\\,Source Computer IP:\\s([^,]+)?\\,Disposition:\\s([^,]+)?\\,Download site:\\s([^,]+)?\\,Web domain:\\s([^,]+)?\\,Downloaded by:\\s([^,]+)?\\,Prevalence:\\s([^,]+)?\\,Confidence:\\s([^,]+)?\\,URL Tracking Status:\\s([^,]+)?\\,([\\s\\S]+)\",dynamic([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]),AgentRiskLogsSubstring)[0], dynamic(\"\"))\n| extend AgentRiskLogsSubstring2  = tostring(AgentRiskLogsParser2[15])\n| extend AgentRiskLogsParser3 = iif(SyslogMessage has (\"Sensitivity:\"), extract_all(@\"^First Seen:\\s([^,]+)?\\,Sensitivity:\\s([^,]+)?\\,Permitted application reason:\\s([^,]+)?\\,Application hash:\\s([^,]+)?\\,Hash type:\\s([^,]+)?\\,Company name:\\s([^,]+)?\\,Application name:\\s([^,]+)?\\,Application version:\\s([^,]+)?\\,Application type:\\s([^,]+)?\\,File size \\(bytes\\):\\s([^,]+)?\\,Category set:\\s([^,]+)?\\,Category type:\\s([^,]+)?\\,Location:\\s([^,]+)?\\,Intensive Protection Level:\\s([^,]+)?\\,Certificate issuer:\\s([^,]+)?\\,([\\s\\S]+)\",dynamic([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]),AgentRiskLogsSubstring2)[0], dynamic(\"\"))\n| extend AgentRiskLogsSubstring3  = tostring(AgentRiskLogsParser3[15])\n| extend AgentRiskLogsParser4 = iif(SyslogMessage has (\"Certificate signer:\"), extract_all(@\"^Certificate signer:\\s([^,]+)?\\,Certificate thumbprint:\\s([^,]+)?\\,Signing timestamp:\\s([^,]+)?\\,Certificate serial number:\\s([^,]+)?(\\,|$)\",dynamic([1,2,3,4]),AgentRiskLogsSubstring3)[0], dynamic(\"\"))\n| extend SiteName = case(LogType has \"Administrative Logs\", tostring(AdministrativeLogsParser[0]),\n            LogType has \"Agent Activity Logs\", tostring(AgentActivityLogsParser[0]), \"\"),\n         ServerName = case(LogType has \"Administrative Logs\", tostring(AdministrativeLogsParser[1]),\n            LogType has \"Agent Risk Logs\", tostring(AgentRiskLogsParser2[4]), \"\"),\n         DomainName = case(LogType has \"Administrative Logs\", tostring(AdministrativeLogsParser[2]),\n            LogType has \"Agent Activity Logs\", tostring(AgentActivityLogsParser[6]), \n            LogType has \"Agent Behavior Logs\", tostring(AgentBehaviorLogsParser2[4]), \n            LogType has \"Agent Traffic Logs\", tostring(AgentTrafficLogsParser2[5]), \n            LogType has \"Agent Security Logs\", tostring(AgentSecurityLogsParser2[4]), \n            LogType has \"Agent Risk Logs\", tostring(AgentRiskLogsParser2[2]), \"\"),\n         AdminName = tostring(AdministrativeLogsParser[3]),\n         EventDescription = case(LogType has \"Administrative Logs\", tostring(AdministrativeLogsParser[4]),\n            LogType has \"Agent System Logs\", tostring(AgentSystemLogsParser[3]), \n            LogType has \"Agent Activity Logs\", tostring(AgentActivityLogsParser[3]), \n            LogType has \"Agent Behavior Logs\", extract(@\"([\\S\\s]+)\\-\\sCaller\\sMD5\",1,tostring(AgentBehaviorLogsParser[3])),\n            LogType has \"Agent Security Logs\", iif(isempty(tostring(AgentSecurityLogsParser[2])),tostring(AgentSecurityLogsParser[3]),tostring(AgentSecurityLogsParser[2])), LogType has \"Agent System Logs\", tostring(AgentSystemLogsParser[3]),\n            LogType has \"Agent Risk Logs\", tostring(AgentRiskLogsParser[8]), \"\"),\n         Category = toint(AgentSystemLogsParser[1]),\n         EventSource = tostring(AgentSystemLogsParser[2]),\n         EventTimestamp = tostring(AgentSystemLogsParser[4]),\n         GroupName = case(LogType has \"Agent System Logs\", tostring(AgentSystemLogsParser[5]),\n            LogType has \"Agent Risk Logs\", tostring(AgentRiskLogsParser2[3]), \"\"),\n         SEPMDomainName = tostring(AgentActivityLogsParser[2]),\n         HostName = tostring(AgentActivityLogsParser[4]),\n         UserName = case(LogType has \"Agent Activity Logs\", tostring(AgentActivityLogsParser[5]),\n            LogType has \"Agent Behavior Logs\", tostring(AgentBehaviorLogsParser2[3]), \n            LogType has \"Agent Traffic Logs\", tostring(AgentTrafficLogsParser2[4]),\n            LogType has \"Agent Security Logs\", tostring(AgentSecurityLogsParser2[3]), \n            LogType has \"Agent Risk Logs\", tostring(AgentRiskLogsParser2[5]),\"\"),\n         IpAddr = tostring(AgentBehaviorLogsParser[1]),\n         Action = case(LogType has \"Agent Behavior Logs\", tostring(AgentBehaviorLogsParser[2]),\n            LogType has \"Agent Traffic Logs\", tostring(AgentTrafficLogsParser2[6]), \n            LogType has \"Agent Packet Logs\", tostring(AgentPacketLogsParser[6]), \n            LogType has \"Agent Risk Logs\", tostring(AgentRiskLogsParser[0]), \"\"),\n         CallerMD5Hash = extract(@\"Caller\\sMD5\\=(\\S+)\",1,tostring(AgentBehaviorLogsParser[3])),\n         ApiName = tostring(AgentBehaviorLogsParser[4]),\n         EventStartTime = case(LogType has \"Agent Behavior Logs\", todatetime(AgentBehaviorLogsParser[5]),\n            LogType has \"Agent Traffic Logs\", todatetime(AgentTrafficLogsParser[10]), \n            LogType has \"Agent Security Logs\", todatetime(AgentSecurityLogsParser[13]), \n            LogType has \"Agent Risk Logs\", todatetime(AgentRiskLogsParser[12]), datetime(null)),\n         EventEndTime = case(LogType has \"Agent Behavior Logs\", todatetime(AgentBehaviorLogsParser[6]),\n            LogType has \"Agent Traffic Logs\", todatetime(AgentTrafficLogsParser[11]), \n            LogType has \"Agent Security Logs\", todatetime(AgentSecurityLogsParser[14]), \n            LogType has \"Agent Risk Logs\", todatetime(AgentRiskLogsParser[14]), \n            LogType has \"Agent Risk Logs\", todatetime(AgentRiskLogsParser2[0]), datetime(null)),\n         SecurityRuleName = tostring(AgentBehaviorLogsParser[7]),\n         CallerProcessId = toint(AgentBehaviorLogsParser[8]),\n         CallerProcessName = tostring(AgentBehaviorLogsParser[9]),\n         AgentBehaviorLogsSubstring = tostring(AgentBehaviorLogsParser[10]),\n         CallerReturnAddr = tostring(AgentBehaviorLogsParser2[0]),\n         CallerReturnModuleName = tostring(AgentBehaviorLogsParser2[1]),\n         Parameters = tostring(AgentBehaviorLogsParser2[2]),\n         ActionType = tostring(AgentBehaviorLogsParser2[5]),\n         FileSize = case(LogType has \"Agent Behavior Logs\", toint(AgentBehaviorLogsParser2[6]),\n            LogType has \"Agent Risk Logs\", toint(AgentRiskLogsParser3[9]), int(null)),\n         DeviceId = tostring(AgentBehaviorLogsParser2[7]),\n         LocalHostIpAddr = case(LogType has \"Agent Traffic Logs\", tostring(AgentTrafficLogsParser[1]),\n            LogType has \"Agent Security Logs\", tostring(AgentSecurityLogsParser[4]), \n            LogType has \"Agent Packet Logs\", tostring(AgentPacketLogsParser[0]), \"\"),\n         LocalPortNumber = case(LogType has \"Agent Traffic Logs\", toint(AgentTrafficLogsParser[2]),\n            LogType has \"Agent Security Logs\", toint(AgentSecurityLogsParser2[5]), \n            LogType has \"Agent Packet Logs\", toint(AgentPacketLogsParser[1]), int(null)),\n         LocalHostMacAddr = case(LogType has \"Agent Traffic Logs\", tostring(AgentTrafficLogsParser[3]),\n            LogType has \"Agent Security Logs\", tostring(AgentSecurityLogsParser[5]), \"\"),\n         RemoteHostIpAddr = case(LogType has \"Agent Traffic Logs\", tostring(AgentTrafficLogsParser[4]),\n            LogType has \"Agent Security Logs\", tostring(AgentSecurityLogsParser[7]), \n            LogType has \"Agent Packet Logs\", tostring(AgentPacketLogsParser[2]), \"\"),\n         RemoteHostName = case(LogType has \"Agent Traffic Logs\", tostring(AgentTrafficLogsParser[5]),\n            LogType has \"Agent Security Logs\", tostring(AgentSecurityLogsParser[6]), \n            LogType has \"Agent Packet Logs\", tostring(AgentPacketLogsParser[3]), \"\"),\n         RemotePortNumber = case(LogType has \"Agent Traffic Logs\", toint(AgentTrafficLogsParser[6]),\n            LogType has \"Agent Security Logs\", toint(AgentSecurityLogsParser2[6]), \n            LogType has \"Agent Packet Logs\", toint(AgentPacketLogsParser[4]), int(null)),\n         RemoteHostMacAddr = case(LogType has \"Agent Traffic Logs\", tostring(AgentTrafficLogsParser[7]),\n            LogType has \"Agent Security Logs\", tostring(AgentSecurityLogsParser[8]), \"\"),\n         NetworkProtocol = case(LogType has \"Agent Traffic Logs\", tostring(AgentTrafficLogsParser[8]),\n            LogType has \"Agent Security Logs\", tostring(AgentSecurityLogsParser[10]), \"\"),\n         TrafficDirection = case(LogType has \"Agent Traffic Logs\", tostring(AgentTrafficLogsParser[9]),\n            LogType has \"Agent Security Logs\", tostring(AgentSecurityLogsParser[9]), \"\"),\n         AgentTrafficLogsSubstring  = tostring(AgentTrafficLogsParser[12]),\n         Occurrences = case(LogType has \"Agent Traffic Logs\", toint(AgentTrafficLogsParser2[0]),\n            LogType has \"Agent Security Logs\", toint(AgentSecurityLogsParser2[0]), \n            LogType has \"Agent Risk Logs\", toint(AgentRiskLogsParser[5]), int(null)),\n         ApplicationName = case(LogType has \"Agent Traffic Logs\", tostring(AgentTrafficLogsParser2[1]),\n            LogType has \"Agent Security Logs\", tostring(AgentSecurityLogsParser2[0]), \n            LogType has \"Agent Risk Logs\", AgentRiskLogsParser3[6], \"\"),\n         RuleName = tostring(AgentTrafficLogsParser2[2]),\n         Location = case(LogType has \"Agent Traffic Logs\", tostring(AgentTrafficLogsParser2[3]),\n            LogType has \"Agent Security Logs\", tostring(AgentSecurityLogsParser2[2]), \n            LogType has \"Agent Risk Logs\", tostring(AgentRiskLogsParser3[12]), \"\"),\n         Sha256 = case(LogType has \"Agent Traffic Logs\", tostring(AgentTrafficLogsParser2[8]),\n            LogType has \"Agent Security Logs\", tostring(AgentSecurityLogsParser2[11]), \"\"),\n         Md5 = case(LogType has \"Agent Traffic Logs\", tostring(AgentTrafficLogsParser2[10]),\n            LogType has \"Agent Security Logs\", tostring(AgentSecurityLogsParser2[12]), \"\"),\n         IntrusionId = tostring(AgentSecurityLogsParser[11]),\n         CidsSignatureId = tostring(AgentSecurityLogsParser2[7]),\n         CidsSignatureString = tostring(AgentSecurityLogsParser2[8]),\n         CidsSignatureSubId = toint(AgentSecurityLogsParser2[9]),\n         IntrusionUrl = tostring(AgentSecurityLogsParser2[10]),\n         Application = tostring(AgentPacketLogsParser[5]),\n         SrcIpAddr = tostring(AgentRiskLogsParser[1]),\n         SrcHostName = tostring(AgentRiskLogsParser[2]),\n         Source = tostring(AgentRiskLogsParser[3]),\n         RiskName = tostring(AgentRiskLogsParser[4]),\n         FilePath = iif(isempty(tostring(AgentRiskLogsParser[6])),tostring(AgentRiskLogsParser[7]),tostring(AgentRiskLogsParser[6])),\n         ActualAction = tostring(AgentRiskLogsParser[9]),\n         RequestedAction = tostring(AgentRiskLogsParser[10]),\n         SecondaryAction = tostring(AgentRiskLogsParser[11]),\n         EventInsertTime = todatetime(AgentRiskLogsParser[13]),\n         LastUpdateTime = todatetime(AgentRiskLogsParser2[1]),\n         SrcComputerName = tostring(AgentRiskLogsParser2[6]),\n         SrcComputerIpAddr = tostring(AgentRiskLogsParser2[7]),\n         Disposition = tostring(AgentRiskLogsParser2[8]),\n         DownloadSite = tostring(AgentRiskLogsParser2[9]),\n         WebDomain = tostring(AgentRiskLogsParser2[10]),\n         DownloadedBy = tostring(AgentRiskLogsParser2[11]),\n         Prevalence = tostring(AgentRiskLogsParser2[12]),\n         Confidence = tostring(AgentRiskLogsParser2[13]),\n         UrlTrackingStatus = tostring(AgentRiskLogsParser2[14]),\n         FirstSeen = tostring(AgentRiskLogsParser3[0]),\n         Sensitivity = tostring(AgentRiskLogsParser3[1]),\n         PermittedApplicationReason = tostring(AgentRiskLogsParser3[2]),\n         ApplicationHash = tostring(AgentRiskLogsParser3[3]),\n         HashType = tostring(AgentRiskLogsParser3[4]),\n         CompanyName = tostring(AgentRiskLogsParser3[5]),\n         ApplicationVersion = tostring(AgentRiskLogsParser3[7]),\n         ApplicationType = tostring(AgentRiskLogsParser3[8]),\n         CategorySet = tostring(AgentRiskLogsParser3[10]),\n         CategoryType = tostring(AgentRiskLogsParser3[11]),\n         IntensiveProtectionLevel = tostring(AgentRiskLogsParser3[13]),\n         CertificateIssuer = tostring(AgentRiskLogsParser3[14]),\n         CertificateSigner = tostring(AgentRiskLogsParser4[0]),\n         CertificateThumbprint = tostring(AgentRiskLogsParser4[1]),\n         SigningTimestamp = tostring(AgentRiskLogsParser4[2]),\n         CertificateSerialNumber = tostring(AgentRiskLogsParser4[3])\n| extend LogType = case(LogType !in (\"Agent System Logs\",\"Agent Activity Logs\",\"Agent Behavior Logs\", \"Agent Traffic Logs\",\"Agent Security Logs\", \"Agent Packet Logs\", \"Agent Risk Logs\", \"Administrative Logs\"), iif(isempty(LogType),\"Other\", LogType), LogType)\n| project-away *Parser*, *Substring*\n",
        "version": 1,
        "tags": []
      }
    }
  ]
}
