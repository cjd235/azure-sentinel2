{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "workspace": {
      "type": "String"
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('workspace'), '/(UbiquitiAuditEvent')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "eTag": "*",
        "displayName": "UbiquitiAuditEvent",
        "category": "Microsoft Sentinel Parser",
        "FunctionAlias": "UbiquitiAuditEvent",
        "query": "let EventData = Ubiquiti_CL\n| extend EventVendor = 'Ubiquiti'\n| extend EventTime = extract(@'\\<\\d+\\>(\\w+\\s+\\w+\\s+\\d+:\\d+:\\d+)\\s\\w+,', 1, Message)\n| extend DvcType = iif(extract(@'\\d+\\:\\d+\\:\\d+\\s(\\w+),[A-Fa-f0-9]{12}', 1, Message)!=\"\", extract(@'\\d+\\:\\d+\\:\\d+\\s(\\w+),[A-Fa-f0-9]{12}', 1, Message), extract(@'\\d+\\:\\d+\\:\\d+\\s[A-Fa-f0-9]{12},([A-Za-z-]+)-', 1, Message))\n| extend DvcMacAddr = replace(@'(:)$', @'', replace(@'(\\w{2})', @'\\1:', extract(@'([A-Fa-f0-9]{12}),' , 1, Message)))\n| extend FirmwareVersion = iif(extract(@'[A-Fa-f0-9]{12},v(.*?)\\:', 1, Message)!=\"\", extract(@'[A-Fa-f0-9]{12},v(.*?)\\:', 1, Message), extract(@'[A-Fa-f0-9]{12},[A-Za-z-]+([\\d\\.\\+]+)[\\:\\s]', 1, Message));\nlet ubiquiti_dropbear_events =() {\nEventData\n| where Message contains 'dropbear'\n| extend EventCategory = 'dropbear'\n| extend EventMessage = extract(@' dropbear\\[\\d+\\]\\:\\s(.*)', 1, Message)\n| extend SrcIpAddr = extract(@'from (\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})\\:\\d{1,5}', 1, Message)\n| extend SrcPortNumber = extract(@'from \\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\:(\\d{1,5})', 1, Message)\n};\nlet ubiquiti_hostapd_events =() {\nEventData\n| where Message contains 'hostapd'\n| extend EventCategory = 'hostapd'\n| extend WlanId = extract(@'hostapd:\\s(\\w+)', 1, Message)\n| extend SrcType = extract(@':\\s(\\w+)\\s[A-Fa-f0-9:]{17}', 1, Message)\n| extend SrcMacAddr = extract(@':\\s(\\w+)\\s([A-Fa-f0-9:]{17})', 2, Message)\n| extend DstMacAddr = extract(@'addr=([a-fA-F0-9:]{17})', 1, Message)\n| extend Service = extract(@'[A-Fa-f0-9:]{17}\\s(.+):', 2, Message)\n| extend EventMessage = extract(@'[A-Fa-f0-9:]{17}\\s(.*):\\s(.*)', 2, Message)\n};\nlet ubiquiti_firewall_events =() {\nEventData\n| where Message matches regex @'kernel:\\s+\\[.+\\]\\s+IN=\\w+\\s+OUT=\\w+\\s+'\n| extend EventCategory = 'firewall'\n| extend FlowId = extract(@'ID=(.*?)\\s', 1, Message)\n| extend DvcInboundInterface = extract(@'IN=(.*?)\\s', 1, Message)\n| extend DvcOutboundInterface = extract(@'OUT=(.*?)\\s', 1, Message)\n| extend dvc_action = extract(@'kernel:\\s+\\[\\S+-(\\w)\\]', 1, Message)\n| extend DvcAction = case(dvc_action == \"A\", \"Accepted\",\n                          dvc_action == \"B\", \"Blocked\",\n                          dvc_action == \"R\", \"Rejected\",\n                          \"Other\")\n| extend NetworkRuleName = extract(@'kernel:\\s+\\[(\\S+)-\\w\\]', 1, Message)\n| extend DstMacAddr = extract(@'MAC=([a-fA-F0-9:]{17}):', 1, Message)\n| extend SrcMacAddr = extract(@'MAC=[a-fA-F0-9:]{17}:([a-fA-F0-9:]{17})\\s', 1, Message)\n| extend SrcIpAddr = extract(@'SRC=(.*?)\\s', 1, Message)\n| extend SrcPortNumber = extract(@'SPT=(.*?)\\s', 1, Message)\n| extend DstIpAddr = extract(@'DST=(.*?)\\s', 1, Message)\n| extend DstPortNumber = extract(@'DPT=(.*?)\\s', 1, Message)\n| extend NetworkBytes = extract(@'LEN=(.*?)\\s', 1, Message)\n| extend Tos = extract(@'TOS=(.*?)\\s', 1, Message)\n| extend Prec = extract(@'PREC=(.*?)\\s', 1, Message)\n| extend Ttl = extract(@'TTL=(.*?)\\s', 1, Message)\n| extend NetworkProtocol = extract(@'PROTO=(.*?)\\s', 1, Message)\n| extend Window = extract(@'WINDOW=(.*?)\\s', 1, Message)\n| extend Res = extract(@'RES=(.*?)\\s', 1, Message)\n| extend Mark = extract(@'MARK=(.*?)\\s', 1, Message)\n};\nlet ubiquiti_dns_timeout_events =() {\nEventData\n| where Message contains \"DNS request timed out\"\n| extend EventCategory = 'dnstimeout'\n| extend EventMessage = 'DNS request timed out'\n| extend SrcType = extract(@'\\[(\\w+):\\s[a-fA-F0-9:]{17}\\]', 1, Message)\n| extend DvcMacAddr = extract(@'\\[\\w+:\\s([a-fA-F0-9:]{17})\\]', 1, Message)\n| extend DnsQuery = extract(@'QUERY:(.*?)\\]', 1, Message)\n| extend DnsServer = extract(@'DNS_SERVER\\s?:(.*?)\\]', 1, Message)\n};\nlet ubiquiti_stahtd_events =() {\nEventData\n| where Message contains 'stahtd'\n| extend EventCategory = extract(@'\\\"message_type\\\":\\\"(.*?)\\\"', 1, Message)\n| extend SrcDvcMacAddr = extract(@'\\\"mac\\\":\\\"(.*?)\\\"', 1, Message)\n| extend WlanId = extract(@'\\\"vap\\\":\\\"(.*?)\\\"', 1, Message)\n| extend AssocStatus = extract(@'\\\"assoc_status\\\":\\\"(.*?)\\\"', 1, Message)\n| extend EventResult = extract(@'\\\"event_type\\\":\\\"(.*?)\\\"', 1, Message)\n| extend EventMessage = extract(@'\\}\\s-\\s(.*)', 1, Message)\n};\nlet ubiquiti_EVT_AP_STA_ASSOC_TRACKER_DBG =() {\nEventData\n//| where Message contains 'libubnt'\n| where Message contains 'EVT_AP_STA_ASSOC_TRACKER_DBG'\n| extend EventCategory = 'libubnt'\n| extend WlanId = extract(@'vap:\\s(.*?)', 1, Message)\n| extend SrcMacAddr = extract(@'sta_mac:\\s(.*?)', 1, Message)\n| extend EventResult = extract(@'event_type:\\s(.*)', 1, Message)\n| extend EventMessage = 'Client failed to associate with an AP'\n};\nlet ubiquiti_EVENT_STA_ =() {\nEventData\n//| where Message contains 'libubnt'\n| where Message contains 'EVENT_STA_'\n| extend EventCategory = 'libubnt'\n| extend WlanId = extract(@'EVENT_STA_(JOIN|LEAVE|IP)\\s(\\w+):', 2, Message)\n| extend DvcAction = extract(@'EVENT_STA_(JOIN|LEAVE|IP)', 1, Message)\n| extend EventMessage = case(DvcAction == 'JOIN', 'Client joined AP',\n                             DvcAction == 'LEAVE', 'Client disconnected from AP',\n                             'Client IP info')\n| extend SrcMacAddr = extract(@':\\s([A-Fa-f0-9:]{17})', 1, Message)\n| extend SrcIpAddr = extract(@'\\/\\s(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})', 1, Message)\n};\nlet ubiquiti_syswrapper_events =() {\nEventData\n| where Message contains 'syswrapper'\n| extend EventCategory = 'syswrapper'\n| extend EventMessage = extract(@'syswrapper:\\s(.*)', 1, Message)\n};\nlet ubiquiti_logread_events =() {\nEventData\n| where Message contains 'logread'\n| extend EventCategory = 'logread'\n| extend DstIpAddr = extract(@'to\\s(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})', 1, Message)\n| extend DstPortNumber = extract(@'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}:(\\d{1,5})', 1, Message)\n| extend EventMessage = extract(@'logread\\[\\d+\\]:\\s(.*)', 1, Message)\n};\nlet ubiquiti_stamgr_events =() {\nEventData\n| where Message contains'stamgr'\n| extend EventCategory = 'stamgr'\n| extend DstMacAddr = extract(@'\\s([A-Fa-f0-9:]{17})', 1, Message)\n| extend WlanId = extract(@'\\s[A-Fa-f0-9:]{17}\\s(\\S+)', 1, Message)\n| extend EventMessage = extract(@'stamgr:(.*?)\\(', 1, Message)\n| extend EventResultDetails = extract(@'reason:(.*?)\\)', 1, Message)\n};\nlet ubiquiti_kernel_events =() {\nEventData\n| where Message contains 'kernel'\n| where Message contains 'FWLOG' or Message contains 'set_ratelimit'\n| extend EventCategory = 'kernel'\n| extend EventMessage = case(Message matches regex \"kernel.*FWLOG\", extract(@'FWLOG:\\s\\[\\d+\\]\\s(.*)', 1, Message),\n                             Message matches regex \"kernel.*_set_ratelimit\", extract(@'_set_ratelimit:\\s(.*)', 1, Message),\n                             \"Check raw_message for details\")\n};\nlet ubiquiti_dns_events =() {\nEventData\n| where Message matches regex @'dnsmasq\\[\\d+\\]:'\n| extend DstMacAddr = extract(@'MAC=([a-fA-F0-9:]{17}):', 1, Message)\n| extend SrcMacAddr = extract(@'MAC=[a-fA-F0-9:]{17}:([a-fA-F0-9:]{17})\\s', 1, Message) \n| extend DnsQuery = extract(@'dnsmasq\\[\\d+\\]:\\s(.*?)\\[\\w+\\]|\\s(\\S+)\\sfrom\\s\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}', 2, Message)\n| extend SrcIpAddr = extract(@'dnsmasq\\[\\d+\\]:\\s(.*?)\\[\\w+\\]|\\s(.*?)from\\s(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})', 3, Message)\n};\nunion isfuzzy=true ubiquiti_dropbear_events, ubiquiti_hostapd_events, ubiquiti_firewall_events, ubiquiti_dns_timeout_events, ubiquiti_stahtd_events, ubiquiti_EVT_AP_STA_ASSOC_TRACKER_DBG, ubiquiti_EVENT_STA_, ubiquiti_syswrapper_events, ubiquiti_logread_events, ubiquiti_stamgr_events, ubiquiti_kernel_events, ubiquiti_dns_events\n| project TimeGenerated\n        , EventVendor\n        , EventTime\n        , EventCategory\n        , DvcType\n        , DvcMacAddr\n        , FirmwareVersion\n        , EventMessage\n        , WlanId\n        , SrcType\n        , Service\n        , FlowId\n        , DvcInboundInterface\n        , DvcOutboundInterface\n        , DvcAction\n        , NetworkRuleName\n        , SrcMacAddr\n        , SrcIpAddr\n        , SrcPortNumber\n        , DstMacAddr\n        , DstIpAddr\n        , DstPortNumber\n        , NetworkBytes\n        , Tos\n        , Prec\n        , Ttl\n        , NetworkProtocol\n        , Window\n        , Res\n        , Mark\n        , DnsQuery\n        , DnsServer\n        , SrcDvcMacAddr\n        , AssocStatus\n        , EventResult\n        , EventResultDetails\n        , Message\n",
        "version": 1,
        "tags": []
      }
    }
  ]
}
