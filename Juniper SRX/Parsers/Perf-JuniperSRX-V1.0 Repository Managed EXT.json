{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "workspace": {
      "type": "String"
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('workspace'), '/(JuniperSRX')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "eTag": "*",
        "displayName": "JuniperSRX",
        "category": "Microsoft Sentinel Parser",
        "FunctionAlias": "JuniperSRX",
        "query": "let LogHeader = Syslog\n| extend Parser = extract_all(@\"(\\w+)\\:?\\s([\\S\\s]+)\", dynamic([1,2]),SyslogMessage)\n| mv-expand Parser\n| extend EventTimestamp = EventTime,\n         DvcHostname = HostName,\n         EventType = ProcessName,\n         ProcessId = ProcessID,\n         Message = trim(\"- \",tostring(Parser[1]))\n| project-away Parser;\nlet SshEvents = LogHeader\n| where EventType =~ \"sshd\"\n| extend Parser = extract_all(@\"password\\sfor\\s(\\w+)\\sfrom\\s([0-9.]+)\\sport\\s(\\d+)\",dynamic([1,2,3]), Message)\n| mv-expand Parser\n| extend UserName = tostring(Parser[0]),\n         SrcIpAddr = tostring(Parser[1]),\n         DstIpAddr = \"\",\n         SrcPortNumber = toint(Parser[2]),\n         DstPortNumber = toint(\"\"),\n         ZoneName = \"\",\n         InterfaceName = \"\",\n         Action = \"\"\n| extend EventName = extract(@\"^(\\w+\\s?\\w+?)\\s(for|from)\",1, Message)\n| extend EventName = extract(@\"([\\w\\s]+\\!)\",1, Message)\n| extend UserName = iif(isempty(UserName), extract(@\"for\\suser\\s\\'(\\w+)\\'\\sfrom\\shost\\s\\'([0-9\\.]+)\\'\",1, Message), UserName)\n| extend UserName = iif(isempty(UserName), extract(@\"PAM_USER\\:\\s(\\w+)\",1, Message), UserName)\n| extend UserName = iif(isempty(UserName), extract(@\"user:\\s(\\w+)\",1, Message), UserName)\n| extend SrcIpAddr = iif(isempty(SrcIpAddr), extract(@\"from\\s(host)?\\s?\\'?([0-9.]+)\\'?\",2, Message), SrcIpAddr)\n| extend SrcIpAddr = iif(isempty(SrcIpAddr), extract(@\"source\\:\\s([0-9.]+)\\:\",1, Message), SrcIpAddr)\n| extend SrcIpAddr = iif(isempty(SrcIpAddr), extract(@\"closed\\sby\\s([0-9.]+)\\s\",1, Message), SrcIpAddr)\n| extend DstIpAddr = iif(isempty(DstIpAddr), extract(@\"destination\\:\\s([0-9.]+)\\:[0-9]+\",1, Message), DstIpAddr)\n| extend DstPortNumber = iif(isempty(DstPortNumber), toint(extract(@\"destination\\:\\s[0-9.]+\\:([0-9]+)\",1, Message)), DstPortNumber)\n| extend SrcPortNumber = iif(isempty(SrcPortNumber), toint(extract(@\"closed\\sby\\s([0-9.]+)\\sport\\s([0-9]+)\",2, Message)), SrcPortNumber)\n| extend SrcPortNumber = iif(isempty(SrcPortNumber), toint(extract(@\"source\\:\\s[0-9.]+\\:([0-9]+)\",1, Message)), SrcPortNumber)\n| extend ZoneName = iif(isempty(ZoneName), extract(@\"zone\\sname\\:\\s([\\w]+)\\,\\s\",1, Message), ZoneName)\n| extend InterfaceName = iif(isempty(InterfaceName), extract(@\"interface\\sname\\:\\s([\\w\\-\\.\\/]+)\\,\\s\",1, Message), InterfaceName)\n| extend Action = iif(isempty(Action), extract(@\"action\\:\\s([\\w]+)\",1, Message), Action)\n| project-away Parser;\nlet IdsEvents = LogHeader\n| where EventType == \"RT_IDS\"\n| extend SrcIpAddr = extract(@\"source\\:\\s([0-9.]+)\\,?\\:?(\\d+)?\",1, Message),\n         SrcPortNumber = toint(extract(@\"source\\:\\s([0-9.]+)\\,?\\:?(\\d+)?\",2, Message)),\n         DstIpAddr = extract(@\"destination\\:\\s([0-9.]+)\\,?\",1, Message),\n         DstPortNumber = toint(extract(@\"destination\\:\\s([0-9.]+)\\,?\\:?(\\d+)?\",2, Message)),\n         ProtocolId = toint(extract(@\"protocol-id\\:\\s([0-9.]+)\\,\",1, Message)),\n         ZoneName = extract(@\"zone\\sname\\:\\s([\\w]+)\\,\",1, Message),\n         InterfaceName = extract(@\"interface\\sname\\:\\s([\\w\\.]+)\\,\",1, Message),\n         Action = extract(@\"action\\:\\s([\\w\\-\\.]+)\",1, Message);\nlet FlowEvents = LogHeader\n| where EventType == \"RT_FLOW\"\n| extend FlowEventName = extract(@\"^([\\w\\s]+)\\s(\\d.*)\",1, Message);\nlet FlowDenyEvents = FlowEvents\n| where FlowEventName =~ 'session denied'\n| extend Parser = extract_all(@\"^([\\w\\s\\-]+)(\\s|\\:)\\s?([\\d\\.]+)\\/(\\d+)\\-\\>([\\d\\.]+)\\/(\\d+)\\s(\\w+)?\\s?([\\w\\-]+)\\s([\\S\\s]+)\",dynamic([1,2,3,4,5,6,7,8,9]), Message)\n| mv-expand Parser\n| extend EventName = tostring(Parser[0]),\n         SrcIpAddr = tostring(Parser[2]),\n         SrcPortNumber = toint(Parser[3]),\n         DstIpAddr = tostring(Parser[4]),\n         DstPortNumber = toint(Parser[5]),\n         ServiceName = tostring(Parser[7]),\n         Substring = tostring(Parser[8])\n| project-away Parser, Substring;\nlet FlowNotDenyEvents = FlowEvents\n| where FlowEventName !~ 'session denied'\n| extend Parser = extract_all(@\"^([\\w\\s\\-]+)(\\s|\\:)\\s?([\\d\\.]+)\\/(\\d+)\\-\\>([\\d\\.]+)\\/(\\d+)\\s(\\w+)?\\s?([\\w\\-]+)\\s([\\d\\.]+)\\/(\\d+)\\-\\>([\\d\\.]+)\\/(\\d+)\\s([\\S\\s]+)\",dynamic([1,2,3,4,5,6,7,8,9,10,11,12,13]), Message)\n| mv-expand Parser\n| extend EventName = tostring(Parser[0]),\n         SrcIpAddr = tostring(Parser[2]),\n         SrcPortNumber = toint(Parser[3]),\n         DstIpAddr = tostring(Parser[4]),\n         DstPortNumber = toint(Parser[5]),\n         ServiceName = tostring(Parser[7]),\n         SrcNatIpAddr = tostring(Parser[8]),\n         SrcNatPortNumber = toint(Parser[9]),\n         DstNatIpAddr = tostring(Parser[10]),\n         DstNatPortNumber = toint(Parser[11]),\n         Substring = tostring(Parser[12])\n| extend Parser2 = extract_all(@\"(0x0/s)?([\\S]+)\\s([\\S]+)\\s([\\S]+)\\s([\\S]+)\\s(\\d+)\\s([\\S]+)\\s([\\S]+)\\s([\\S]+)\\s(\\d+)\",dynamic([1,2,3,4,5,6,7,8,9,10]), Substring)\n| mvexpand Parser2\n| extend ProtocolId = toint(Parser2[5]),\n         PolicyName = tostring(Parser2[6]),\n         SrcNatRuleName = tostring(Parser2[7]),\n         DstNatRuleName = tostring(Parser2[8]),\n         SessionId = toint(Parser2[9])\n| project-away Parser, Parser2, Substring;\nlet AllOtherEvents = LogHeader\n| where EventType !in (\"sshd\",\"RT_IDS\",\"RT_FLOW\")\n| extend EventName = extract(@\"^([\\w\\s]+)\\s(0)\",1, Message);\nunion SshEvents, IdsEvents, AllOtherEvents, FlowNotDenyEvents, FlowDenyEvents\n| extend EventName = iif(isempty(EventName), extract(@\"^([\\w\\s]+)\\s(\\d.*)\",1, Message), EventName)\n",
        "version": 1,
        "tags": []
      }
    }
  ]
}
