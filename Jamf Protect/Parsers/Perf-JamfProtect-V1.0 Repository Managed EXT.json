{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "workspace": {
      "type": "String"
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('workspace'), '/(JamfProtect')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "eTag": "*",
        "displayName": "JamfProtect",
        "category": "Microsoft Sentinel Parser",
        "FunctionAlias": "JamfProtect",
        "query": "let JamfProtectAlerts_view  = view () {\njamfprotect_CL\n| where topicType_s == \"alert\"\n    and input_eventType_s <> \"GPUnifiedLogEvent\"\n    and isnotempty(input_match_severity_d)\n// JSON Parsing at earliest stage\n| extend \n    Related_users = parse_json(input_related_users_s),\n    Related_files = parse_json(input_related_files_s),\n    Related_binaries = parse_json(input_related_binaries_s),\n    Related_groups = parse_json(input_related_groups_s),\n    Related_processes = parse_json(input_related_processes_s),\n    Match_facts = parse_json(input_match_facts_s),\n    Match_tags = parse_json(input_match_tags_s),\n    Match_actions = parse_json(input_match_actions_s),\n    Match_context = parse_json(input_match_context_s),\n    Match_event_process_signing = parse_json(input_match_event_process_signingInfo_s)\n// ASIM - Common Fields\n| extend EventVendor = 'Jamf'\n| extend EventProduct = 'Jamf Protect - Alerts'\n| project-rename\n    EventOriginalUid = input_match_uuid_g\n| extend\n    // Jamf Protect - Common Fields\n    EventType = case(\n                input_eventType_s == \"GPClickEvent\",\n                \"Click\",\n                input_eventType_s == \"GPDownloadEvent\",\n                \"Download\",\n                input_eventType_s == \"GPFSEvent\",\n                \"FileSystem\",\n                input_eventType_s == \"GPProcessEvent\",\n                \"Process\",\n                input_eventType_s == \"GPKeylogRegisterEvent\",\n                \"Keylog\",\n                input_eventType_s == \"GPGatekeeperEvent\",\n                \"Gatekeeper\",\n                input_eventType_s == \"GPMRTEvent\",\n                \"MRT\",\n                input_eventType_s == \"GPPreventedExecutionEvent\",\n                \"ProcessDenied\",\n                input_eventType_s == \"GPThreatMatchExecEvent\",\n                \"ProcessPrevented\",\n                input_eventType_s == \"GPUnifiedLogEvent\",\n                \"UnifiedLog\",\n                input_eventType_s == \"GPUSBEvent\",\n                \"USB\",\n                input_eventType_s == \"auth-mount\",\n                \"UsbBlock\",\n                \"Unknown\"\n            ),\n    EventDescription = coalesce(Match_facts[1].human, Match_facts[0].human),\n    EventMessage = coalesce(Match_facts[1].name, Match_facts[0].name),\n    EventStartTime = unixtime_milliseconds_todatetime(tolong(timestamp_d)),\n    EventResult = case(Match_actions has \"Prevented\", \"Prevented\", \"Allowed\"),\n    //\n    // Jamf Protect - Alert details\n    //\n    EventSeverity = case(input_match_severity_d == 0, \"Informational\", input_match_severity_d == 1, \"Low\", input_match_severity_d == 2, \"Medium\", input_match_severity_d == 3, \"High\", \"Informational\"),\n    EventMatch = column_ifexists(\"input_match_event_matchValue_s\", \"\"),\n    EventMatchType = column_ifexists(\"input_match_event_matchType_s\", \"\"),\n    EventReportUrl = strcat(\"https://\", context_identity_claims_hd_s, \".jamfcloud.com/Alerts/\", EventOriginalUid),\n    //\n    // Jamf Protect - Source User\n    SrcUsername = tostring(coalesce(Related_users[1].name, Related_users[0].name)),\n    //\n    // Jamf Protect - Source Device Hostnames\n    //\n    TargetHostname = column_ifexists(\"input_host_hostname_s\", \"\"),\n    DvcHostname = column_ifexists(\"input_host_hostname_s\", \"\"),\n    DvcIpAddr = column_ifexists(\"input_host_ips_s\", \"\"),\n    DvcId = column_ifexists(\"input_host_provisioningUDID_g\", \"\"),\n    DvcOs=\"macOS\",\n    SrcDeviceType=\"Computer\",\n    //\n    // Jamf Protect Alerts - Process\n    //\n    //ParentProcessName = coalesce(input_match_event_process_ppid_d, parse_json('input_related_processes_s')[0].ppid), //column_ifexists(\"exec_chain_child_parent_path_s\", \"\"), coalesce('input.match.event.process.ppid', mvindex('input.related.processes{}.ppid', 0))\n    ProcessEventType = case(input_match_event_type_d == 0, \"None\", input_match_event_type_d == 1, \"Create\", input_match_event_type_d == 2, \"Exit\", \"\"),\n    ProcessEventSubType = case(input_match_event_subType_d == 7, \"Exec\", input_match_event_subType_d == 1, \"Fork\", input_match_event_subType_d == 23, \"Execve\", input_match_event_subType_d == 43190, \"Posix Spawn\", \"\"),\n    ParentProcessId = coalesce(input_match_event_process_ppid_d, toreal(Related_processes[0].ppid)),\n    ParentProcessGuid = tostring(coalesce(input_match_event_process_pgid_d, toreal(Related_processes[0].pgid))),\n    TargetProcessName = coalesce(input_match_event_process_name_s, Related_processes[0].name),\n    TargetProcessId = coalesce(toreal(input_match_event_process_pid_d), toreal(Related_processes[0].pid)),\n    TargetProcessGuid = coalesce(input_match_event_process_uid_d, toreal(Related_processes[0].uid)),\n    TargetProcessSHA1 = Related_binaries[0].sha1hex,\n    TargetProcessCreationTime = unixtime_milliseconds_todatetime(tolong(input_match_event_process_startTimestamp_d)),\n    TargetProcessCommandLine = column_ifexists(\"input_match_event_process_args_s\", \"\"),\n    TargetProcessCurrentDirectory = column_ifexists(\"input_match_event_process_path_s\", \"\"),\n    TargetUserId = toreal(coalesce(Related_users[1].uid, Related_users[0].uid)),\n    TargetUsername = tostring(coalesce(Related_users[1].name, Related_users[0].uid)),\n    //\n    // Jamf Protect Alerts - Files\n    //\n    TargetFilePath = tostring(coalesce(input_match_event_path_s, Related_files[0].path)),\n    TargetFileSHA1 = Related_files[0].sha1hex,\n    TargetFileSHA256 = Related_files[0].sha256hex,\n    TargetFileSize = Related_files[0].size,\n    TargetFileSigningInfoMessage = Related_files[0].signingInfo.statusMessage,\n    TargetFileSignerType = case(Related_files[0].signingInfo.signerType == 0, \"Apple\", Related_files[0].signingInfo.signerType == 1, \"App Store\", Related_files[0].signingInfo.signerType == 2, \"Developer\", Related_files[0].signingInfo.signerType == 3, \"Ad Hoc\", Related_files[0].signingInfo.signerType == 4, \"Unsigned\", \"\"),\n    TargetFileSigningTeamID = Related_files[0].signingInfo.teamid,\n    TargetFileIsDownload = case(Related_files[0].isDownload == \"true\", \"true\", Related_files[0].isDownload == \"false\", \"false\", \"\"),\n    TargetFileIsAppBundle = case(Related_files[0].isAppBundle == \"true\", \"true\", Related_files[0].isAppBundle == \"false\", \"false\", \"\"),\n    TargetFileIsDirectory = case(Related_files[0].isDirectory == \"true\", \"true\", Related_files[0].isDirectory == \"false\", \"false\", \"\"),\n    TargetFileIsScreenshot = case(Related_files[0].isScreenShot == \"true\", \"true\", Related_files[0].isScreenShot == \"false\", \"false\", \"\"),\n    //\n    // Jamf Protect Alerts - Binaries\n    TargetBinaryFilePath = Related_binaries[0].path,\n    TargetBinarySHA1 = tostring(Related_binaries[0].sha1hex),\n    TargetBinarySHA256 = tostring(Related_binaries[0].sha256hex),\n    TargetBinarySigningInfoMessage = Related_binaries[0].signingInfo.statusMessage,\n    TargetbinarySignerType = case(Related_binaries[0].signingInfo.signerType == 0, \"Apple\", Related_binaries[0].signingInfo.signerType == 1, \"App Store\", Related_binaries[0].signingInfo.signerType == 2, \"Developer\", Related_binaries[0].signingInfo.signerType == 3, \"Ad Hoc\", Related_binaries[0].signingInfo.signerType == 4, \"Unsigned\", \"\"),\n    TargetBinarySigningTeamID = tostring(Related_binaries[0].signingInfo.teamid),\n    TargetBinarySigningAppID = tostring(Related_binaries[0].signingInfo.appid)\n| project-reorder\n    TimeGenerated,\n    EventStartTime,\n    EventVendor,\n    EventProduct,\n    EventType,\n    EventDescription,\n    EventMessage,\n    EventSeverity,\n    EventMatch,\n    EventMatchType,\n    EventResult,\n    EventReportUrl,\n    TargetHostname,\n    DvcHostname,\n    DvcId,\n    DvcOs,\n    DvcIpAddr,\n    SrcDeviceType,\n    SrcUsername,\n    ProcessEventType,\n    ProcessEventSubType,\n    ParentProcessId,\n    ParentProcessGuid,\n    TargetProcessName,\n    TargetProcessId,\n    TargetProcessGuid,\n    TargetProcessSHA1,\n    TargetProcessCreationTime,\n    TargetProcessCommandLine,\n    TargetProcessCurrentDirectory,\n    TargetUsername,\n    TargetUserId,\n    TargetFilePath,\n    TargetFileSHA1,\n    TargetFileSHA256,\n    TargetFileSize,\n    TargetFileSigningInfoMessage,\n    TargetFileSignerType,\n    TargetFileSigningTeamID,\n    TargetFileIsAppBundle,\n    TargetFileIsDirectory,\n    TargetFileIsDownload,\n    TargetFileIsScreenshot,\n    TargetBinaryFilePath,\n    TargetBinarySHA1,\n    TargetBinarySHA256,\n    TargetBinarySigningInfoMessage,\n    TargetbinarySignerType,\n    TargetBinarySigningTeamID,\n    TargetBinarySigningAppID,\n    Related_users,\n    Related_files,\n    Related_binaries,\n    Related_groups,\n    Related_processes,\n    Match_event_process_signing,\n    Match_facts,\n    Match_actions,\n    Match_tags,\n    *input_match_event_*\n    | project-keep\n    TimeGenerated,\n    EventStartTime,\n    EventVendor,\n    EventProduct,\n    EventType,\n    EventDescription,\n    EventMessage,\n    EventSeverity,\n    EventMatch,\n    EventMatchType,\n    EventResult,\n    EventReportUrl,\n    TargetHostname,\n    DvcHostname,\n    DvcId,\n    DvcOs,\n    DvcIpAddr,\n    SrcDeviceType,\n    SrcUsername,\n    ProcessEventType,\n    ProcessEventSubType,\n    ParentProcessId,\n    ParentProcessGuid,\n    TargetProcessName,\n    TargetProcessId,\n    TargetProcessGuid,\n    TargetProcessSHA1,\n    TargetProcessCreationTime,\n    TargetProcessCommandLine,\n    TargetProcessCurrentDirectory,\n    TargetUsername,\n    TargetUserId,\n    TargetFilePath,\n    TargetFileSHA1,\n    TargetFileSHA256,\n    TargetFileSize,\n    TargetFileSigningInfoMessage,\n    TargetFileSignerType,\n    TargetFileSigningTeamID,\n    TargetFileIsAppBundle,\n    TargetFileIsDirectory,\n    TargetFileIsDownload,\n    TargetFileIsScreenshot,\n    TargetBinaryFilePath,\n    TargetBinarySHA1,\n    TargetBinarySHA256,\n    TargetBinarySigningInfoMessage,\n    TargetbinarySignerType,\n    TargetBinarySigningTeamID,\n    TargetBinarySigningAppID,\n    Related_users,\n    Related_files,\n    Related_binaries,\n    Related_groups,\n    Related_processes,\n    Match_event_process_signing,\n    Match_facts,\n    Match_actions,\n    Match_tags,\n    *input_match_event_*\n};\n//\n// Jamf Protect - Unified Logs\n//\nlet JamfProtectUnifiedLog_view  = view () {\njamfprotect_CL\n| where input_eventType_s == \"GPUnifiedLogEvent\"\n    and isnotempty(input_match_severity_d)\n// JSON Parsing at earliest stage\n| extend \n    Related_users = parse_json(input_related_users_s),\n    Related_files = parse_json(input_related_files_s),\n    Related_binaries = parse_json(input_related_binaries_s),\n    Related_groups = parse_json(input_related_groups_s),\n    Related_processes = parse_json(input_related_processes_s),\n    Match_facts = parse_json(input_match_facts_s),\n    Match_tags = parse_json(input_match_tags_s),\n    Match_actions = parse_json(input_match_actions_s),\n    Match_context = parse_json(input_match_context_s),\n    Match_event_process_signing = parse_json(input_match_event_process_signingInfo_s)\n// ASIM - Common Fields\n| extend EventVendor = 'Jamf'\n| extend EventProduct = 'Jamf Protect - Unified Log'\n| project-rename\n    EventOriginalUid = input_match_uuid_g\n| extend\n    // Jamf Protect - Common Fields\n    EventType = case(\n                input_eventType_s == \"GPClickEvent\",\n                \"Click\",\n                input_eventType_s == \"GPDownloadEvent\",\n                \"Download\",\n                input_eventType_s == \"GPFSEvent\",\n                \"FileSystem\",\n                input_eventType_s == \"GPProcessEvent\",\n                \"Process\",\n                input_eventType_s == \"GPKeylogRegisterEvent\",\n                \"Keylog\",\n                input_eventType_s == \"GPGatekeeperEvent\",\n                \"Gatekeeper\",\n                input_eventType_s == \"GPMRTEvent\",\n                \"MRT\",\n                input_eventType_s == \"GPPreventedExecutionEvent\",\n                \"ProcessDenied\",\n                input_eventType_s == \"GPThreatMatchExecEvent\",\n                \"ProcessPrevented\",\n                input_eventType_s == \"GPUnifiedLogEvent\",\n                \"UnifiedLog\",\n                input_eventType_s == \"GPUSBEvent\",\n                \"USB\",\n                input_eventType_s == \"Auth-mount\",\n                \"UsbBlock\",\n                \"Unknown\"\n            ),\n    EventDescription = coalesce(Match_facts[1].human, Match_facts[0].human),\n    EventStartTime = unixtime_milliseconds_todatetime(tolong(timestamp_d)),\n    EventResult = case(Match_actions has \"Prevented\", \"Prevented\", \"Allowed\"),\n    //\n    // Jamf Protect - Unified Logs details\n    //\n    EventSeverity = case(input_match_severity_d == 0, \"Informational\", input_match_severity_d == 1, \"Low\", input_match_severity_d == 2, \"Medium\", input_match_severity_d == 3, \"High\", \"Informational\"),\n    EventMatch = column_ifexists(\"input_match_event_matchValue_s\", \"\"),\n    EventMatchType = column_ifexists(\"input_match_event_matchType_s\", \"\"),\n    EventReportUrl = strcat(\"https://\", context_identity_claims_hd_s, \".jamfcloud.com/Alerts/\", EventOriginalUid),\n    //\n    // Jamf Protect - Source User\n    SrcUsername = tostring(coalesce(Related_users[1].name, Related_users[0].name)),\n    //\n    // Jamf Protect - Source Device Hostnames\n    //\n    TargetHostname = column_ifexists(\"input_host_hostname_s\", \"\"),\n    DvcHostname = column_ifexists(\"input_host_hostname_s\", \"\"),\n    DvcIpAddr = column_ifexists(\"input_host_ips_s\", \"\"),\n    DvcId = column_ifexists(\"input_host_provisioningUDID_g\", \"\"),\n    DvcOs=\"macOS\",\n    SrcDeviceType=\"Computer\",\n    //\n    // Jamf Protect Unified Logs - Process\n    //\n    //ParentProcessName = coalesce(input_match_event_process_ppid_d, parse_json('input_related_processes_s')[0].ppid), //column_ifexists(\"exec_chain_child_parent_path_s\", \"\"), coalesce('input.match.event.process.ppid', mvindex('input.related.processes{}.ppid', 0))\n    ProcessEventType = case(input_match_event_type_d == 0, \"None\", input_match_event_type_d == 1, \"Create\", input_match_event_type_d == 2, \"Exit\", \"\"),\n    ProcessEventSubType = case(input_match_event_subType_d == 7, \"Exec\", input_match_event_subType_d == 1, \"Fork\", input_match_event_subType_d == 23, \"Execve\", input_match_event_subType_d == 43190, \"Posix Spawn\", \"\"),\n    ParentProcessId = coalesce(input_match_event_process_ppid_d, toreal(Related_processes[0].ppid)),\n    ParentProcessGuid = tostring(coalesce(input_match_event_process_pgid_d, toreal(Related_processes[0].pgid))),\n    TargetProcessName = coalesce(input_match_event_process_name_s, Related_processes[0].name),\n    TargetProcessId = coalesce(toreal(input_match_event_process_pid_d), toreal(Related_processes[0].pid)),\n    TargetProcessGuid = coalesce(input_match_event_process_uid_d, toreal(Related_processes[0].uid)),\n    TargetProcessSHA1 = Related_binaries[0].sha1hex,\n    TargetProcessCreationTime = unixtime_milliseconds_todatetime(tolong(input_match_event_process_startTimestamp_d)),\n    TargetProcessCommandLine = column_ifexists(\"input_match_event_process_args_s\", \"\"),\n    TargetProcessCurrentDirectory = column_ifexists(\"input_match_event_process_path_s\", \"\"),\n    TargetUserId = toreal(coalesce(Related_users[1].uid, Related_users[0].uid)),\n    TargetUsername = tostring(coalesce(Related_users[1].name, Related_users[0].name)),\n    //\n    // Jamf Protect Unified Logs - Files\n    //\n    TargetFilePath = tostring(coalesce(input_match_event_path_s, Related_files[0].path)),\n    TargetFileSHA1 = Related_files[0].sha1hex,\n    TargetFileSHA256 = Related_files[0].sha256hex,\n    TargetFileSize = Related_files[0].size,\n    TargetFileSigningInfoMessage = Related_files[0].signingInfo.statusMessage,\n    TargetFileSignerType = case(Related_files[0].signingInfo.signerType == 0, \"Apple\", Related_files[0].signingInfo.signerType == 1, \"App Store\", Related_files[0].signingInfo.signerType == 2, \"Developer\", Related_files[0].signingInfo.signerType == 3, \"Ad Hoc\", Related_files[0].signingInfo.signerType == 4, \"Unsigned\", \"\"),\n    TargetFileSigningTeamID = Related_files[0].signingInfo.teamid,\n    TargetFileIsDownload = case(Related_files[0].isDownload == \"true\", \"true\", Related_files[0].isDownload == \"false\", \"false\", \"\"),\n    TargetFileIsAppBundle = case(Related_files[0].isAppBundle == \"true\", \"true\", Related_files[0].isAppBundle == \"false\", \"false\", \"\"),\n    TargetFileIsDirectory = case(Related_files[0].isDirectory == \"true\", \"true\", Related_files[0].isDirectory == \"false\", \"false\", \"\"),\n    TargetFileIsScreenshot = case(Related_files[0].isScreenShot == \"true\", \"true\", Related_files[0].isScreenShot == \"false\", \"false\", \"\")\n| project-reorder\n    TimeGenerated,\n    EventStartTime,\n    EventVendor,\n    EventProduct,\n    EventType,\n    EventDescription,\n    EventSeverity,\n    EventMatch,\n    EventMatchType,\n    EventResult,\n    EventReportUrl,\n    TargetHostname,\n    DvcHostname,\n    DvcId,\n    DvcOs,\n    DvcIpAddr,\n    SrcDeviceType,\n    SrcUsername,\n    ProcessEventType,\n    ProcessEventSubType,\n    ParentProcessId,\n    ParentProcessGuid,\n    TargetProcessName,\n    TargetProcessId,\n    TargetProcessGuid,\n    TargetProcessSHA1,\n    TargetProcessCreationTime,\n    TargetProcessCommandLine,\n    TargetProcessCurrentDirectory,\n    TargetUsername,\n    TargetUserId,\n    TargetFilePath,\n    TargetFileSHA1,\n    TargetFileSHA256,\n    TargetFileSize,\n    TargetFileSigningInfoMessage,\n    TargetFileSignerType,\n    TargetFileSigningTeamID,\n    TargetFileIsAppBundle,\n    TargetFileIsDirectory,\n    TargetFileIsDownload,\n    TargetFileIsScreenshot,\n    Related_users,\n    Related_files,\n    Related_binaries,\n    Related_groups,\n    Related_processes,\n    Match_event_process_signing,\n    Match_facts,\n    Match_actions,\n    Match_tags\n    | project-keep\n    TimeGenerated,\n    EventStartTime,\n    EventVendor,\n    EventProduct,\n    EventType,\n    EventDescription,\n    EventSeverity,\n    EventMatch,\n    EventMatchType,\n    EventResult,\n    EventReportUrl,\n    TargetHostname,\n    DvcHostname,\n    DvcId,\n    DvcOs,\n    DvcIpAddr,\n    SrcDeviceType,\n    SrcUsername,\n    ProcessEventType,\n    ProcessEventSubType,\n    ParentProcessId,\n    ParentProcessGuid,\n    TargetProcessName,\n    TargetProcessId,\n    TargetProcessGuid,\n    TargetProcessSHA1,\n    TargetProcessCreationTime,\n    TargetProcessCommandLine,\n    TargetProcessCurrentDirectory,\n    TargetUsername,\n    TargetUserId,\n    TargetFilePath,\n    TargetFileSHA1,\n    TargetFileSHA256,\n    TargetFileSize,\n    TargetFileSigningInfoMessage,\n    TargetFileSignerType,\n    TargetFileSigningTeamID,\n    TargetFileIsAppBundle,\n    TargetFileIsDirectory,\n    TargetFileIsDownload,\n    TargetFileIsScreenshot,\n    Related_users,\n    Related_files,\n    Related_binaries,\n    Related_groups,\n    Related_processes,\n    Match_event_process_signing,\n    Match_facts,\n    Match_actions,\n    Match_tags,\n    *input_match_event*\n};\n//\n// Jamf Protect - Network Traffic\n//\nlet JamfProtectNetworkTraffic_view  = view () {\njamfprotect_CL\n| where event_metadata_product_s == \"Network Traffic Stream\"\n// ASIM - Common Fields\n| extend EventVendor = 'Jamf'\n| extend EventProduct = 'Jamf Protect - Network Traffic Stream'\n| project-rename\n| extend\n    // Jamf Protect - Common Fields\n    EventType = \"query\",\n    EventSubType = \"request\",\n    EventStartTime = unixtime_milliseconds_todatetime(tolong(event_receiptTime_d)),\n    EventResult = case(event_blocked_b == \"false\", \"Allowed\", event_blocked_b == \"true\", \"Prevented\", ''),\n    // Jamf Protect - Source User\n    SrcUsermail=column_ifexists('event_user_email_s', ''),\n    SrcUsername =  column_ifexists('event_user_name_s', ''),\n    // Jamf Protect - Source Device Hostnames\n    DvcHostname = case(isnotempty(input_host_hostname_s), input_host_hostname_s, isnotempty(host_info_host_name_s), host_info_host_name_s, event_device_userDeviceName_s),\n    DvcIpAddr = column_ifexists(\"event_source_ip_s\", \"\"),\n    DvcId = column_ifexists(\"event_device_externalId_g\", \"\"),\n    DvcOs = case(event_device_osType_s == \"MAC_OS\", \"macOS\", event_device_osType_s == \"IOS\", \"iOS\", event_device_osType_s == \"ANDROID\", \"Android\", \"Other\"),\n    SrcDeviceType = case(event_device_osType_s == \"MAC_OS\", \"Computer\", event_device_osType_s == \"IOS\", \"Mobile Device\", event_device_osType_s == \"ANDROID\", \"Mobile Device\", \"Other\"),\n    // Jamf Protect - DNS Specific\n    DnsQuery = column_ifexists('event_hostName_s', ''),\n    DvcAction = case(event_blocked_b == \"false\", \"Allowed\", event_blocked_b == \"true\", \"Blocked\", ''),\n    DnsQueryName = column_ifexists('event_domain_s', ''),\n    DstIpAddr = column_ifexists('event_destination_ips_s', ''),\n    ThreatCategory = column_ifexists('event_eventType_description_s', ''),\n    DnsQueryTypeName = column_ifexists('event_dns_recordType_s', ''),\n    DnsResponseName = column_ifexists('event_dns_responseStatus_s', ''),\n    ThreatOriginalRiskLevel = column_ifexists('event_threat_result_s', '')\n| project-keep\n    TimeGenerated,\n    EventVendor,\n    EventProduct,\n    EventType,\n    EventSubType,\n    EventStartTime,\n    EventResult,\n    DvcHostname,\n    DvcIpAddr,\n    DvcId,\n    DvcOs,\n    SrcDeviceType,\n    SrcUsermail,\n    SrcUsername,\n    DnsQuery,\n    DnsQueryName,\n    DstIpAddr,\n    DnsQueryTypeName,\n    DvcAction,\n    DnsResponseName,\n    ThreatOriginalRiskLevel\n};\n//\n// Jamf Protect - Endpoint Telemetry\n//\nlet JamfProtectTelemetry_view  = view () {\n    jamfprotect_CL\n    | where header_event_name_s startswith \"AUE_\" \n        or header_event_name_s == \"PLAINTEXT_LOG_COLLECTION_EVENT\"\n        or header_event_name_s == \"SYSTEM_PERFORMANCE_METRICS\"\n    // ASIM - Common Fields\n    | extend EventVendor = 'Jamf'\n    | extend EventProduct = 'Jamf Protect - Telemetry'\n    // Data Field Normalization\n    //| project-rename \n    //    DvcIpAddr = input_host_ips_s,\n    //    DvcId = context_identity_claims_clientid_g\n    | extend\n        // Jamf Protect Alerts - Generic Information\n        EventSeverity = case(\n                    input_match_severity_d == 0,\n                    \"Informational\",\n                    input_match_severity_d == 1,\n                    \"Low\",\n                    input_match_severity_d == 2,\n                    \"Medium\",\n                    input_match_severity_d == 3,\n                    \"High\",\n                    \"Informational\"\n                ),\n        EventStartTime = unixtime_milliseconds_todatetime(tolong(timestamp_d)),\n        EventResult = coalesce(return_description_s, texts_s),\n        // Jamf Protect Telemetry - Endpoint Information\n        TargetModel = column_ifexists(\"metrics_hw_model_s\", \"\"),\n        DvcOsVersion = column_ifexists(\"host_info_osversion_s\", \"\"),\n        TargetHostname = case(isnotempty(input_host_hostname_s), input_host_hostname_s, isnotempty(host_info_host_name_s), host_info_host_name_s, event_device_userDeviceName_s),\n        DvcHostname = case(isnotempty(input_host_hostname_s), input_host_hostname_s, isnotempty(host_info_host_name_s), host_info_host_name_s, event_device_userDeviceName_s),\n        DvcIpAddr = column_ifexists(\"input_host_ips_s\", \"\"),\n        DvcId = column_ifexists(\"context_identity_claims_clientid_g\", \"\"),\n        // Jamf Protect - Event Types\n        EventType = case(\n                header_event_name_s == \"AUE_add_to_group\",\n                \"UserAddedToGroup\",\n                header_event_name_s == \"AUE_AUDITCTL\",\n                \"AuditEvent\",\n                header_event_name_s == \"AUE_AUDITON_SPOLICY\",\n                \"AuditEvent\",\n                header_event_name_s == \"AUE_auth_user\",\n                \"Elevate\",\n                header_event_name_s == \"AUE_BIND\",\n                \"EndpointNetworkSession\",\n                header_event_name_s == \"AUE_BIOS_FIRMWARE_VERSIONS\",\n                \"SystemInformation\",\n                header_event_name_s == \"AUE_CHDIR\",\n                \"FolderMoved\",\n                header_event_name_s == \"AUE_CHROOT\",\n                \"FolderModified\",\n                header_event_name_s == \"AUE_CONNECT\",\n                \"EndpointNetworkSession\",\n                header_event_name_s == \"AUE_create_group\",\n                \"GroupCreated\",\n                header_event_name_s == \"AUE_create_user\",\n                \"UserCreated\",\n                header_event_name_s == \"AUE_delete_group\",\n                \"GroupDeleted\",\n                header_event_name_s == \"AUE_delete_user\",\n                \"UserDeleted\",\n                header_event_name_s == \"AUE_EXECVE\",\n                \"ProcessCreated\",\n                header_event_name_s == \"AUE_EXIT\",\n                \"ProcessTerminated\",\n                header_event_name_s == \"AUE_FORK\",\n                \"ProcessCreated\",\n                header_event_name_s == \"AUE_GETAUID\",\n                \"\",\n                header_event_name_s == \"AUE_KILL\",\n                \"ProcessTerminated\",\n                header_event_name_s == \"AUE_LISTEN\",\n                \"EndpointNetworkSession\",\n                header_event_name_s == \"AUE_logout\",\n                \"Logoff\",\n                header_event_name_s == \"AUE_lw_login\",\n                \"Logon\",\n                header_event_name_s == \"AUE_MAC_SET_PROC\",\n                \"AuditEvent\",\n                header_event_name_s == \"AUE_modify_group\",\n                \"GroupModified\",\n                header_event_name_s == \"AUE_modify_password\",\n                \"PasswordChanged\",\n                header_event_name_s == \"AUE_modify_user\",\n                \"UserModified\",\n                header_event_name_s == \"AUE_MOUNT\",\n                \"VolumeMount\",\n                header_event_name_s == \"AUE_openssh\",\n                \"SshInitiated\",\n                header_event_name_s == \"AUE_PIDFORTASK\",\n                \"ProcessCreated\",\n                header_event_name_s == \"AUE_POSIX_SPAWN\",\n                \"ProcessCreated\",\n                header_event_name_s == \"AUE_remove_from_group\",\n                \"UserRemovedFromGroup\",\n                header_event_name_s == \"AUE_SESSION_CLOSE\",\n                \"Logoff\",\n                header_event_name_s == \"AUE_SESSION_END\",\n                \"Logoff\",\n                header_event_name_s == \"AUE_SESSION_START\",\n                \"Logon\",\n                header_event_name_s == \"AUE_SESSION_UPDATE\",\n                \"\",\n                header_event_name_s == \"AUE_SETPRIORITY\",\n                \"\",\n                header_event_name_s == \"AUE_SETSOCKOPT\",\n                \"\",\n                header_event_name_s == \"AUE_SETTIMEOFDAY\",\n                \"SystemChange\",\n                header_event_name_s == \"AUE_shutdown\",\n                \"ShutdownInitiated\",\n                header_event_name_s == \"AUE_SOCKETPAIR\",\n                \"\",\n                header_event_name_s == \"AUE_ssauthint\",\n                \"Elevate\",\n                header_event_name_s == \"AUE_ssauthmech\",\n                \"Elevate\",\n                header_event_name_s == \"AUE_ssauthorize\",\n                \"Elevate\",\n                header_event_name_s == \"AUE_TASKFORPID\",\n                \"\",\n                header_event_name_s == \"AUE_TASKNAMEFORPID\",\n                \"\",\n                header_event_name_s == \"AUE_UNMOUNT\",\n                \"VolumeUnmount\",\n                header_event_name_s == \"AUE_WAIT4\",\n                \"ProcessTerminated\",\n                header_event_name_s == \"PLAINTEXT_LOG_COLLECTION_EVENT\",\n                \"LogFileCollected\",\n                header_event_name_s == \"SYSTEM_PERFORMANCE_METRICS\",\n                \"SystemPerformanceMetrics\",\n                \"Unknown\"\n            ),\n        // Jamf Protect Telemetry - Process\n        ParentProcessName = column_ifexists(\"exec_chain_child_parent_path_s\", \"\"),\n        ParentProcessId = column_ifexists(\"exec_chain_child_parent_pid_d\", \"\"),\n        ParentProcessGuid = column_ifexists(\"exec_chain_child_parent_uuid_g\", \"\"),\n        TargetProcessName = column_ifexists(\"subject_process_name_s\", \"\"),\n        TargetProcessId = column_ifexists(\"subject_responsible_process_id_d\", \"\"),\n        TargetProcessGuid = column_ifexists(\"subject_process_id_d\", \"\"),\n        TargetProcessSHA1 = todynamic(column_ifexists(\"subject_process_hash_s\", \"\")),\n        TargetUserId = toreal(column_ifexists(\"subject_user_id_d\", \"\")),\n        TargetUsername = tostring(column_ifexists(\"subject_user_name_s\", \"\")),\n        TargetProcessCommandLine = column_ifexists(\"exec_args_args_compiled_s\", \"\"),\n        ActorUsername = tostring(column_ifexists(\"subject_effective_user_name_s\", \"\")),\n        ActorUserId = column_ifexists(\"subject_audit_user_name_s\", \"\"),\n        //column_ifexists(\"application_name_s\", \"\"),\n        //\n        // Jamf Protect Telemetry - Audit/Group\n        //\n        GroupName = todynamic(column_ifexists(\"subject_group_name_s\", \"\")),\n        // Jamf Protect Telemetry - Network\n        DstIpAddr = column_ifexists(\"socket_inet_ip_address_s\", \"\"),\n        DstPortNumber = column_ifexists(\"socket_inet_port_d\", \"\"),\n        NetworkProtocolVersion = case(socket_inet_id_d == 128, \"IPV4\", socket_inet_id_d == 129, \"IPV6\", \"\"),\n        SrcIpAddr = column_ifexists(\"subject_terminal_id_ip_address_s\", \"\"),\n        //\n        // Jamf Protect Telemetry - Binaries\n        //\n        // TargetBinaryFilePath = todynamic(Related_binaries[0].path),\n        TargetBinarySHA256 = tostring(identity_cd_hash_s),\n        // TargetBinarySigningInfoMessage = Related_binaries[0].signingInfo.statusMessage,\n        TargetbinarySignerType = case(identity_signer_type_d == 0, \"Apple\", identity_signer_type_d == 1, \"App Store\", identity_signer_type_d == 2, \"Developer\", identity_signer_type_d == 3, \"Ad Hoc\", identity_signer_type_d == 4, \"Unsigned\", \"\"),\n        TargetBinarySigningTeamID = tostring(identity_team_id_s),\n        //\n        // Jamf Protect Telemetry - Log File Collection\n        //\n        TargetFilePath = tostring(parse_json(path_s))\n    | project-reorder\n        EventStartTime,\n        EventVendor,\n        EventProduct,\n        EventType,\n        EventSeverity,\n        EventResult,\n        TargetHostname,\n        DvcHostname,\n        DvcId,\n        DvcOsVersion,\n        DvcIpAddr,\n        TargetModel,\n        TargetUserId,\n        TargetUsername,\n        ParentProcessName,\n        ParentProcessId,\n        ParentProcessGuid,\n        TargetProcessName,\n        TargetProcessId,\n        TargetProcessGuid,\n        TargetProcessSHA1,\n        TargetProcessCommandLine,\n        ActorUsername,\n        ActorUserId,\n        TargetBinarySHA256,\n        TargetbinarySignerType,\n        TargetBinarySigningTeamID,\n        GroupName,\n        SrcIpAddr,\n        DstIpAddr,\n        DstPortNumber,\n        NetworkProtocolVersion,\n        TargetFilePath\n    | project-away\n        arguments_sflags_d,\n        arguments_am_failure_d,\n        arguments_am_success_d\n};\n//\n// Jamf Protect - Threat Events\n//\nlet JamfProtectThreatEvents_view  = view () {\njamfprotect_CL\n| where event_metadata_product_s == \"Threat Events Stream\"\n// ASIM - Common Fields\n| extend EventVendor = 'Jamf'\n| extend EventProduct = 'Jamf Protect - Threat Events Stream'\n| project-rename\n| extend\n    // Jamf Protect - Common Fields\n    EventStartTime = column_ifexists(\"event_timestamp_t\", \"\"),\n    EventResult=case(event_action_s == \"Blocked\", \"Blocked\", event_action_s == \"Detected\", \"Detected\", ''),\n    EventReportUrl = column_ifexists(\"event_eventUrl_s\", \"\"),\n    // Jamf Protect - Alert Details\n    EventSeverity = case(event_severity_d == 2, \"Informational\", event_severity_d == 4, \"Low\", event_severity_d == 6, \"Medium\", event_severity_d == 8, \"High\", event_severity_d == 10, \"High\", \"Informational\"),\n    // Jamf Protect - Source User\n    SrcUsermail=column_ifexists('event_user_email_s', ''),\n    SrcUsername=column_ifexists('event_user_name_s', ''),\n    // Jamf Protect - Source Device Hostnames\n    DvcHostname = column_ifexists(\"event_device_userDeviceName_s\", \"\"),\n    DvcIpAddr = column_ifexists(\"event_source_ip_s\", \"\"),\n    DvcId = column_ifexists(\"event_device_externalId_g\", \"\"),\n    DvcOs=case(event_device_os_s has \"MAC_OS\", \"macOS\", event_device_os_s has \"IOS\", \"iOS\", event_device_os_s has \"ANDROID\", \"Android\", \"Other\"),\n    SrcDeviceType=case(event_device_os_s has \"MAC_OS\", \"Computer\", event_device_os_s has \"IOS\", \"Mobile Device\", event_device_os_s has \"ANDROID\", \"Mobile Device\", \"Other\"),\n    // Jamf Protect - DNS Specific\n    DnsQuery=column_ifexists('event_hostName_s', ''),\n    DvcAction=case(event_blocked_b == \"false\", \"Allowed\", event_blocked_b == \"true\", \"Blocked\", ''),\n    DnsQueryName=column_ifexists('event_destination_name_s', ''),\n    DstIpAddr=column_ifexists('event_destination_ip_s', ''),\n    ThreatCategory=column_ifexists('event_eventType_description_s', ''),\n    ThreatOriginalRiskLevel=column_ifexists('event_threat_result_s', ''),\n    // Jamf Protect - App Specific\n    TargetFileName = column_ifexists(\"event_app_name_s\", \"\"),\n    TargetFileSHA1 = column_ifexists(\"event_app_sha1_s\", \"\"),\n    TargetFileSHA256 = column_ifexists(\"event_app_sha256_s\", \"\")\n| project-keep\n    TimeGenerated,\n    EventVendor,\n    EventProduct,\n    EventStartTime,\n    EventResult,\n    EventReportUrl,\n    EventSeverity,\n    DvcHostname,\n    DvcIpAddr,\n    DvcId,\n    SrcDeviceType,\n    SrcUsermail,\n    SrcUsername,\n    DnsQuery,\n    DnsQueryName,\n    DstIpAddr,\n    ThreatCategory,\n    DvcAction,\n    ThreatOriginalRiskLevel,\n    TargetFileName,\n    TargetFileSHA1,\n    TargetFileSHA256\n};\nunion isfuzzy=true JamfProtectAlerts_view, JamfProtectUnifiedLog_view, JamfProtectNetworkTraffic_view, JamfProtectTelemetry_view, JamfProtectThreatEvents_view\n",
        "version": 1,
        "tags": []
      }
    }
  ]
}
