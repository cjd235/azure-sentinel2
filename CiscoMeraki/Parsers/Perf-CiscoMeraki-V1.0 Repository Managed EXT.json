{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "workspace": {
      "type": "String"
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('workspace'), '/(CiscoMeraki')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "eTag": "*",
        "displayName": "CiscoMeraki",
        "category": "Microsoft Sentinel Parser",
        "FunctionAlias": "CiscoMeraki",
        "query": "let MerakiSyslogDevices = pack_array(\"server1\", \"server2\"); // replace server1 and server2 with your actual Cisco Meraki device(s) and add more with comma separated\nunion isfuzzy=true\n        (\n\t\t\tmeraki_CL\n\t\t\t| project-rename LogMessage =  Message\n        ),\n        (\n\t\t\tSyslog\n\t\t\t| where Computer in (MerakiSyslogDevices)\n\t\t\t| project-rename LogMessage =  SyslogMessage\n        ),\n        (\n            CiscoMerakiNativePoller_CL\n            | extend LogMessage = \"\"\n            | extend\n                     Action = DvcAction,\n                     Message = EventMessage,\n                     NetworkProtocol = coalesce(NetworkProtocol, NetworkApplicationProtocol),\n                     Sha256 = Hash\n            | extend Signature = extract(@\"signature=(\\S+);\",1,tostring(AdditionalFields)),\n                     LogType = iff(EventOriginalType == \"IDS Alert\", \"ids-alerts\", \"security_event\")\n        )\n| extend Parser = extract_all(@\"(\\d+.\\d+)\\s([\\w\\-\\_]+)\\s([\\w\\-\\_]+)\\s([\\S\\s]+)$\", dynamic([1, 2, 3, 4]), LogMessage)[0]\n| extend Epoch = tostring(Parser[0]),\n        DeviceName = coalesce(tostring(Parser[1]),column_ifexists(\"SrcHostname\",\"\")),\n        LogType = coalesce(column_ifexists(\"LogType\",\"\"),tostring(Parser[2])),\n        Substring = tostring(Parser[3])\n| extend EpochTimestamp = split(Epoch,\".\")\n| extend EventTimestamp = unixtime_seconds_todatetime(tolong(EpochTimestamp[0]))\n| extend EventStartTime = coalesce(EventTimestamp,column_ifexists(\"EventStartTime\",datetime(null)))\n| extend SrcIpAddr = case(\n                        isnotempty(column_ifexists(\"SrcIpAddr\",\"\")), column_ifexists(\"SrcIpAddr\",\"\"),\n                        LogType has \"urls\", extract(@\"src=([0-9\\.]+)\\:\",1,Substring),\n                        LogType has \"flows\", extract(@\"src=([0-9\\.]+)\\s\",1,Substring),\n                        LogType has \"security_event\", extract(@\"src=([0-9\\.]+)\\:\",1,Substring),\n                        LogType has \"ids-alerts\", extract(@\"src=([0-9\\.]+)\\:\",1,Substring),\n                        LogType has \"events\", extract(@\"(peer_contact|ip_src)=\\'([0-9\\.]+)\\:\",2,Substring),\n                        \"\"\n                    ),\n\t\t SrcPortNumber = case(\n                            isnotnull(column_ifexists(\"SrcPortNumber\",int(null))),\n                            column_ifexists(\"SrcPortNumber\",int(null)),\n                            LogType has \"urls\", toint(extract(@\"src=([0-9\\.]+)\\:(\\d+)\\s\",2,Substring)),\n                            LogType has \"flows\", toint(extract(@\"sport=(\\S+)\",1,Substring)),\n                            LogType has \"security_event\", toint(extract(@\"src=([0-9\\.]+)\\:(\\d+)\",2,Substring)),\n                            LogType has \"ids-alerts\", toint(extract(@\"src=([0-9\\.]+)\\:(\\d+)\",2,Substring)),\n                            LogType has \"events\", toint(extract(@\"(peer_contact|ip_src)=\\'([0-9\\.]+)\\:(\\d+)\\'\",3,Substring)),\n                            int(null)\n                        ),\n\t\t DstIpAddr = case(\n                        isnotempty(column_ifexists(\"DstIpAddr\",\"\")), column_ifexists(\"DstIpAddr\",\"\"),\n                        LogType has \"urls\",extract(@\"dst=([0-9\\.]+)\\:\",1,Substring),\n                        LogType has \"flows\", extract(@\"dst=([0-9\\.]+)\\s\",1,Substring),\n                        LogType has \"security_event\", extract(@\"dst=([0-9\\.]+)\\:\",1,Substring),\n                        \"\"\n                    ),\n\t\t DstPortNumber = case(\n                            isnotnull(column_ifexists(\"DstPortNumber\",int(null))),\n                            column_ifexists(\"DstPortNumber\",int(null)),\n                            LogType has \"urls\", toint(extract(@\"dst=([0-9\\.]+)\\:(\\d+)\\s\",2,Substring)),\n                            LogType has \"flows\", toint(extract(@\"dport=(\\S+)\",1,Substring)),\n                            LogType has \"security_event\", toint(extract(@\"dst=([0-9\\.]+)\\:(\\d+)\",2,Substring)),\n                            int(null)\n                        ),\n\t\t HttpRequestMethod = iff(LogType has \"urls\", extract(@\"request: (\\w+)\\s\",1,Substring), dynamic(\"\")),\n\t\t Url = case(\n                    isnotempty(column_ifexists(\"Url\",\"\")), column_ifexists(\"Url\",\"\"),\n                    LogType has \"urls\", extract(@\"request: (\\w+)\\s(\\S+)\",2,Substring),\n                    LogType has \"security_event\", tostring(extract(@\"url=(\\S+)\\s\",1,Substring)),\n                    \"\"),\n\t\t SrcMacAddr = case(\n                        isnotempty(column_ifexists(\"SrcMacAddr\",\"\")), column_ifexists(\"SrcMacAddr\",\"\"),\n                        LogType has \"airmarshal_events\", tostring(extract(@\"src=\\'(\\S+)\\'\",1,Substring)),\n                        LogType has \"flows\", tostring(extract(@\"mac=(\\S+)\\s\",1,Substring)),\n                        LogType has \"security_event\", tostring(extract(@\"shost=(\\S+)\\s\",1,Substring)),\n                        \"\"\n                    ),\n\t\t NetworkProtocol = case(\n                            isnotempty(column_ifexists(\"NetworkProtocol\",\"\")), column_ifexists(\"NetworkProtocol\",\"\"),\n                            LogType has \"ids-alerts\", tostring(extract(@\"protocol=(\\w+)\\s\",1,Substring)),\n                            LogType has \"flows\", extract(@\"protocol=(\\w+)\\s\",1,Substring),\n                            LogType has \"security_event\", tostring(extract(@\"protocol=(\\w+)\\s\",1,Substring)),\n                            \"\"\n                        ),\n\t\t Pattern = iff(LogType has \"flows\", extract(@\"pattern\\: ([\\S\\s]+)\",1,Substring), dynamic(\"\")),\n\t\t EventType = case(\n                        isnotempty(column_ifexists(\"EventOriginalType\",\"\")), column_ifexists(\"EventOriginalType\",\"\"),\n                        LogType has \"airmarshal_events\", tostring(extract(@\"type= (\\S+)\",1,Substring)),\n                        LogType has \"events\", tostring(extract(@\"type=(\\S+)\",1,Substring)),\n                        LogType has \"security_event\", tostring(extract(@\"^(\\S+)\\s\\w+\\:\",1,Substring)),\n                        \"\"\n                    ),\n\t\t Ssid = iff(LogType has \"airmarshal_events\", tostring(extract(@\"ssid=\\'(\\S+)\\'\",1,Substring)),dynamic(\"\")),\n\t\t Vap = case(\n                    LogType has \"airmarshal_events\", toint(extract(@\"vap=\\'(\\S+)\\'\\s\",1,Substring)),\n                    LogType has \"events\", toint(extract(@\"vap=\\'(\\S+)\\'\\s\",1,Substring)),\n                    dynamic(\"\")\n                ),\n\t\t Bssid = iff(LogType has \"airmarshal_events\",tostring(extract(@\"bssid=\\'(\\S+)\\'\",1,Substring)),dynamic(\"\")),\n\t\t DstMacAddr = case(\n                        LogType has \"airmarshal_events\", tostring(extract(@\"dst=\\'(\\S+)\\'\",1,Substring)),\n                        LogType has \"security_event\", tostring(extract(@\"dhost=(\\S+)\\s\",1,Substring)),\n                        \"\"\n                    ),\n\t\t WiredMacAddr = iff(LogType has \"airmarshal_events\", tostring(extract(@\"wired_mac=\\'(\\S+)\\'\",1,Substring)), dynamic(\"\")),\n\t\t Channel = case(\n                    LogType has \"airmarshal_events\", toint(extract(@\"channel=\\'(\\d+)\\'\",1,Substring)),\n                    LogType has \"events\", toint(extract(@\"channel=\\'(\\S+)\\'\",1,Substring)),\n                    dynamic(\"\")\n                ),\n\t\t VlanId = iff(LogType has \"airmarshal_events\", toint(extract(@\"vlan_id=\\'(\\d+)\\'\",1,Substring)), dynamic(\"\")),\n\t\t Rssi = iff(LogType has \"airmarshal_events\" or LogType has \"events\", toint(extract(@\"rssi=\\'(\\d+)\\'\",1,Substring)), int(null)),\n\t\t FcType = iff(LogType has \"airmarshal_events\", toint(extract(@\"fc_type=\\'(\\S+)\\'\",1,Substring)), dynamic(\"\")),\n\t\t FcSubType = iff(LogType has \"airmarshal_events\", toint(extract(@\"fc_subtype=\\'(\\S+)\\'\",1,Substring)), dynamic(\"\")),\n\t\t Signature = case(\n                    isnotempty(column_ifexists(\"Signature\",\"\")), column_ifexists(\"Signature\",\"\"),\n                    LogType has \"security_event\", tostring(extract(@\"signature=(\\S+)\\s\",1,Substring)),\n                    LogType has \"ids-alerts\", tostring(extract(@\"signature=(\\S+)\\s\",1,Substring)),\n                    \"\"\n                ),\n\t\t Priority = case(\n                    LogType has \"security_event\", toint(extract(@\"priority=(\\d+)\\s\",1,Substring)),\n                    LogType has \"ids-alerts\", toint(extract(@\"priority=(\\d+)\\s\",1,Substring)),\n                    dynamic(\"\")\n                ),\n\t\t EventEpoch = case(\n                        LogType has \"security_event\", tostring(extract(@\"timestamp=(\\S+)\\s\",1,Substring)),\n                        LogType has \"ids-alerts\", tostring(extract(@\"timestamp=(\\S+)\\s\",1,Substring)),\n                        \"\"\n                    ),\n\t\t NetworkDirection = case(\n                            LogType has \"security_event\", tostring(extract(@\"direction=(\\S+)\",1,Substring)),\n                            LogType has \"ids-alerts\", tostring(extract(@\"direction=(\\S+)\",1,Substring)),\n                            \"\"\n                        ),\n\t\t Action = case(\n                            isnotempty(column_ifexists(\"Action\",\"\")), column_ifexists(\"Action\",\"\"),\n                            LogType has \"security_event\", tostring(extract(@\"action=(\\w+)\",1,Substring)),\n                            \"\"\n                    ),\n\t\t Message = iff(LogType has \"security_event\", tostring(extract(@\"message: ([\\w\\.\\-\\+\\,\\s]+)(\\s\\w+\\=)?\",1,Substring)), column_ifexists(\"Message\",\"\")),\n\t\t VpnType = iff(LogType has \"events\",  tostring(extract(@\"vpn_type=\\'(\\S+)\\'\",1,Substring)), dynamic(\"\")),\n\t\t PeerIdentity = iff(LogType has \"events\",  tostring(extract(@\"peer_ident=\\'(\\S+)\\'\",1,Substring)), dynamic(\"\")),\n\t\t Radio = iff(LogType has \"events\",  toint(extract(@\"radio=\\'(\\d+)\\'\",1,Substring)), dynamic(\"\")),\n\t\t Group = iff(LogType has \"events\",  toint(extract(@\"group=\\'(\\S+)?\\'\",1,Substring)), dynamic(\"\")),\n\t\t Attribute = iff(LogType has \"events\",  toint(extract(@\"attr=\\'(\\S+)?\\'\",1,Substring)), dynamic(\"\")),\n\t\t ClientMacAddr = case(\n                        isnotempty(column_ifexists(\"SrcMacAddr\",\"\")), column_ifexists(\"SrcMacAddr\",\"\"),\n                        LogType has \"events\",  tostring(extract(@\"client_mac=\\'(\\S+)\\'\",1,Substring)),\n                        \"\"\n                ),\n\t\t Reason = iff(LogType has \"events\",  toint(extract(@\"reason=\\'(\\S+)\\'\",1,Substring)), dynamic(\"\")),\n\t\t AppleDaReason = iff(LogType has \"events\",  toint(extract(@\"apple_da_reason=\\'(\\S+)\\'\",1,Substring)), dynamic(\"\")),\n\t\t Duration = iff(LogType has \"events\",  tostring(extract(@\"duration=\\'(\\S+)\\'\",1,Substring)), \"\"),\n\t\t FullConn = iff(LogType has \"events\",  tostring(extract(@\"full_conn=\\'(\\S+)\\'\",1,Substring)), dynamic(\"\")),\n\t\t IpResp = iff(LogType has \"events\",  tostring(extract(@\"ip_resp=\\'(\\S+)\\'\\s\",1,Substring)), dynamic(\"\")),\n\t\t HttpResp = iff(LogType has \"events\",  tostring(extract(@\"http_resp=\\'(\\S+)\\'\",1,Substring)), dynamic(\"\")),\n\t\t ArpResp = iff(LogType has \"events\",  tostring(extract(@\"arp_resp=\\'(\\S+)\\'\",1,Substring)), dynamic(\"\")),\n\t\t ArpSrcIpAddr = case(\n                        isnotempty(column_ifexists(\"SrcIpAddr\",\"\")), column_ifexists(\"SrcIpAddr\",\"\"),\n                        LogType has \"events\",  tostring(extract(@\"arp_src=\\'(\\S+)\\'\",1,Substring)),\n                        \"\"\n                ),\n\t\t Connectivity = iff(LogType has \"events\",  tostring(extract(@\"connectivity=\\'(\\S+)\\'\",1,Substring)), dynamic(\"\")),\n\t\t Rtt = iff(LogType has \"events\",  tostring(extract(@\"rtt=\\'([\\w+\\.\\s]+)\\'\",1,Substring)), dynamic(\"\")),\n\t\t UserName = iff(LogType has \"events\",  tostring(extract(@\"identity=\\'(\\S+)\\'\",1,Substring)), dynamic(\"\")),\n\t\t Aid = iff(LogType has \"events\",  tostring(extract(@\"aid=\\'(\\S+)\\'\",1,Substring)), dynamic(\"\")),\n\t\t Spi = iff(LogType has \"events\",  tostring(extract(@\"spi=(\\S+)$\",1,Substring)), dynamic(\"\")),\n\t\t DvcMacAddr = case(\n                        isnotempty(column_ifexists(\"DvcMacAddr\",\"\")), column_ifexists(\"DvcMacAddr\",\"\"),\n                        LogType has \"events\",  tostring(extract(@\"device=\\'(\\S+)\\'\",1,Substring)),\n                        \"\"\n                ),\n\t\t State = iff(LogType has \"events\",  tostring(extract(@\"state=\\'(\\S+)\\'\",1,Substring)), dynamic(\"\")),\n\t\t AlarmId = iff(LogType has \"events\",  toint(extract(@\"alarm_id=\\'(\\S+)\\'\",1,Substring)), dynamic(\"\")),\n\t\t DosCount = iff(LogType has \"events\",  tostring(extract(@\"dos_count=\\'(\\S+)\\'\",1,Substring)), dynamic(\"\")),\n\t\t InterArrival = iff(LogType has \"events\",  tostring(extract(@\"inter_arrival=\\'(\\S+)\\'\",1,Substring)), dynamic(\"\")),\n\t\t LogTimestamp = case(\n                            isnotnull(column_ifexists(\"EventStartTime\",datetime(null))), column_ifexists(\"EventStartTime\",datetime(null)),\n                            LogType has \"security_event\", unixtime_seconds_todatetime(tolong(split(tostring(extract(@\"timestamp=(\\S+)\\s\",1,Substring)),\".\")[0])),\n                            LogType has \"ids-alerts\", unixtime_seconds_todatetime(tolong(split(tostring(extract(@\"timestamp=(\\S+)\\s\",1,Substring)),\".\")[0])),\n                            datetime(null)\n                        ),\n\t\t IpAddr = iff(LogType has \"events\", tostring(extract(@\"dhcp lease of ip ([\\d\\.]+)\", 1, Substring)), dynamic(\"\")),\n\t\t ServerMacAddr = iff(LogType has \"events\", tostring(extract(@\"server mac ([\\w\\:]+)\", 1, Substring)), dynamic(\"\")),\n\t\t RouterIpAddr = iff(LogType has \"events\", tostring(extract(@\"router ([\\d\\.]+)\", 1, Substring)), dynamic(\"\")),\n\t\t Subnet = iff(LogType has \"events\",  tostring(extract(@\"subnet ([\\d\\.]+)\", 1, Substring)), dynamic(\"\")),\n\t\t Dns = iff(LogType has \"events\",  split(extract(@\"dns ([\\d\\.\\,\\:\\s]+)\", 1, Substring), \", \"), dynamic(\"\"))\n| extend\n            ClientMacAddr = iif(isempty(ClientMacAddr), tostring(extract(@\"client mac ([\\w\\:]+)\", 1, Substring)), ClientMacAddr),\n\t\t    SrcPortNumber = iif(isempty(SrcPortNumber), toint(extract(@\"port=\\'(\\S+)\\'\",1,Substring)), SrcPortNumber),\n            Dns = iif(Dns[0] == \"\", \"\", Dns)\n| extend LogType = case(\n                    isnotempty(LogType), LogType,\n                    LogType !in (\"urls\", \"airmarshal_events\",\"security_event\",\"ids-alerts\", \"events\") and LogType !contains \"flows\", iif(isempty(LogType), \"\", LogType),\n                    \"\"\n                ),\n         NetworkProtocol = case(NetworkProtocol has \"tcp\", \"TCP\",\n                                NetworkProtocol has \"udp\", \"UDP\",\n                                \"\"),\n         EventSeverity = case(\n                             isnotempty(column_ifexists(\"EventSeverity\",\"\")), column_ifexists(\"EventSeverity\",\"\"),\n                              Priority == 1, \"High\",\n                              Priority == 2, \"Medium\",\n                              Priority == 3, \"Low\",\n                              Priority == 4, \"Infomational\",\n                              \"\"),\n        Disposition = case(\n                            EventType contains \"File Scanned\", tolower(column_ifexists(\"EventOriginalSeverity\",\"\")),\n                            LogType has \"security_event\", tostring(extract(@\"disposition=(\\w+)\",1,Substring)),\n                            \"\"\n                        ),\n        ThreatName = case(\n                            LogType has \"security_event\", tostring(extract(@\"name=(\\S+)\",1,Substring)),\n                            \"\"\n                        ),\n        Sha256 = case (\n                            EventType == \"File Scanned\", column_ifexists(\"Sha256\",\"\"),\n                            LogType has \"security_event\",  tostring(extract(@\"sha256=(\\S+)?\",1,Substring)),\n                            \"\"\n                        ),\n        Action = case(\n                            Action == \"block\", \"deny\",\n                            tolower(Action)\n            )\n| project-away Substring, Parser\n",
        "version": 1,
        "tags": []
      }
    }
  ]
}
