{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "workspace": {
      "type": "String"
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('workspace'), '/(OracleWebLogicServerEvent')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "eTag": "*",
        "displayName": "OracleWebLogicServerEvent",
        "category": "Microsoft Sentinel Parser",
        "FunctionAlias": "OracleWebLogicServerEvent",
        "query": "let owl_serverlog =() {\nOracleWebLogicServer_CL\n| where RawData startswith \"####\"\n| extend EventVendor = \"Oracle\"\n| extend EventProduct = 'Oracle WebLogic Server'\n| extend EventType = 'ServerLog'\n| extend EventData = extract_all(@\"<(.*?)>\", RawData)\n| extend EventStartTime = todatetime(replace(@',\\d+', @'', replace(@'(\\s\\d{1,2}),', @'\\1', extract(@'\\A(.*(PM|AM))', 1, tostring(EventData[0])))))\n| extend DvcTimeZone = extract(@'\\A.*(PM|AM)(.*)', 2, tostring(EventData[0]))\n| extend EventSeverity = tostring(EventData[1])\n| extend Subsystem = tostring(EventData[2])\n| extend DvcHostname = tostring(EventData[3])\n| extend SrcDvcHostname = tostring(EventData[4])\n| extend TreadId = tostring(EventData[5])\n| extend SrcUserName = replace(@'<', '', tostring(EventData[6]))\n| extend TransactionId = tostring(EventData[7])\n| extend DiagnosticContextId = tostring(EventData[8])\n| extend RawTimeValue = tostring(EventData[9])\n| extend EventOriginalUid = tostring(EventData[10])\n| extend EventMessage = tostring(EventData[11])\n};\nlet owl_accesslog=() {\nOracleWebLogicServer_CL\n| where RawData matches regex @'\\A\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}.*\\[.*\\]\\s\\\"(GET|POST)'\n| extend EventVendor = \"Oracle\"\n| extend EventProduct = 'Oracle WebLogic Server'\n| extend EventType = 'AccessLog'\n| extend EventData = split(RawData, '\"')\n| extend SubEventData0 = split(trim_start(@' ', (trim_end(@' ', tostring(EventData[0])))), ' ')\n| extend SubEventData1 = split(EventData[1], ' ')\n| extend SubEventData2 = split(trim_start(@' ', (trim_end(@' ', tostring(EventData[2])))), ' ')\n| extend SrcIpAddr = tostring(SubEventData0[0])\n| extend ClientIdentity = tostring(SubEventData0[1])\n| extend SrcUserName = tostring(SubEventData0[2])\n| extend EventStartTime = todatetime(replace(@'\\/', @'-', replace(@'(\\d{2}\\/\\w{3}\\/\\d{4}):(\\d{2}\\:\\d{2}\\:\\d{2})', @'\\1 \\2', extract(@'\\[(.*?)(\\-|\\+)\\d+\\]', 1, RawData))))\n| extend HttpRequestMethod = tostring(SubEventData1[0])\n| extend UrlOriginal = tostring(SubEventData1[1])\n| extend HttpVersion = tostring(SubEventData1[2])\n| extend HttpStatusCode = toint(SubEventData2[0])\n| extend HttpResponseBodyBytes = toint(SubEventData2[1])\n| extend HttpReferrerOriginal = tostring(EventData[3])\n| extend HttpUserAgentOriginal = tostring(EventData[5])\n};\nunion isfuzzy=true owl_serverlog, owl_accesslog\n| project TimeGenerated\n        , EventVendor\n        , EventProduct\n        , EventType\n        , EventStartTime\n        , DvcTimeZone\n        , EventSeverity\n        , Subsystem\n        , DvcHostname\n        , SrcDvcHostname\n        , TreadId\n        , SrcUserName\n        , TransactionId\n        , DiagnosticContextId\n        , RawTimeValue\n        , EventOriginalUid\n        , EventMessage\n        , SrcIpAddr\n        , ClientIdentity\n        , HttpRequestMethod\n        , UrlOriginal\n        , HttpVersion\n        , HttpStatusCode\n        , HttpResponseBodyBytes\n        , HttpReferrerOriginal\n        , HttpUserAgentOriginal\n",
        "version": 1,
        "tags": []
      }
    }
  ]
}
