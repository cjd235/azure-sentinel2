{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "workspace": {
      "type": "String"
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('workspace'), '/(CylancePROTECT')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "eTag": "*",
        "displayName": "CylancePROTECT",
        "category": "Microsoft Sentinel Parser",
        "FunctionAlias": "CylancePROTECT",
        "query": "let LogHeader = Syslog\n| where Computer in (\"sysloghost\") // Replace sysloghost with the name of your syslog server\n| extend EventType = extract(@\"^\\W*([\\w-]+),\",1,SyslogMessage),\n        EventName = extract(@\"Event Name: ([^,]+),\",1,SyslogMessage),\n        DeviceName = extract(@\"Device Name: ([^,]+),\",1,SyslogMessage);\nlet DeviceEvents = LogHeader\n| where SyslogMessage contains \"Device,\"\n| extend AgentVersion = extract(@\"Agent Version: ([^,]+),\",1,SyslogMessage),\n        SrcIpAddr = split(extract(@\"IP Address: \\(([^)]+)\\),\",1,SyslogMessage),\",\"),\n        SrcMacAddr = split(extract(@\"MAC Address: \\(([^)]+)\\),\",1,SyslogMessage),\",\"),\n        LoggedOnUsers = split(extract(@\"Logged On Users: \\(([^)]+)\\),\",1,SyslogMessage),\",\"),\n        OsVersion = extract(@\"OS: ([^,]+),\",1,SyslogMessage),\n        ZoneNames = split(extract(@\"Zone Names: \\(([^)]+)\\)(,|$)\",1,SyslogMessage),\",\");\nlet ScriptControlEvents = LogHeader\n| where SyslogMessage contains \"ScriptControl\"\n| extend FilePath = extract(@\"File Path: ([^,]+),\",1,SyslogMessage),\n        FileHashSha256 = extract(@\"SHA256: ([^,]+),\",1,SyslogMessage),\n        Interpreter = extract(@\"Interpreter: ([^,]+),\",1,SyslogMessage),\n        InterpreterVersion = extract(@\"Interpreter Version: ([^,]+),\",1,SyslogMessage),\n        UserName = extract(@\"User Name: ([^,]+),\",1,SyslogMessage),\n        DeviceId = extract(@\"Device Id: ([^,]+),\",1,SyslogMessage),\n        PolicyName = extract(@\"Policy Name: ([^,]+)(,|$)\",1,SyslogMessage);\nlet ThreatEvents = LogHeader\n| where SyslogMessage contains \"Threat\"\n| extend SrcIpAddr = split(extract(@\"IP Address: \\(([^)]+)\\),\",1,SyslogMessage),\",\"),\n        FileName = extract(@\"File Name: ([^,]+),\",1,SyslogMessage),\n        Path = extract(@\"Path: ([^,]+)(,|$)\",1,SyslogMessage),\n        DriveType = extract(@\"Drive Type: ([^,]+),\",1,SyslogMessage),\n        FileHashSha256 = extract(@\"SHA256: ([^,]+),\",1,SyslogMessage),\n        FileHashMd5 = extract(@\"MD5: ([^,]+),\",1,SyslogMessage),\n        Status = extract(@\"Status: ([^,]+),\",1,SyslogMessage),\n        CylanceScore = extract(@\"Cylance Score: ([^,]+),\",1,SyslogMessage),\n        FoundDate = extract(@\"Found Date: ([^,]+),\",1,SyslogMessage),\n        FileType = extract(@\"File Type: ([^,]+),\",1,SyslogMessage),\n        IsRunning = extract(@\"Is Running: ([^,]+),\",1,SyslogMessage),\n        AutoRun = extract(@\"Auto Run: ([^,]+),\",1,SyslogMessage),\n        DetectedBy = extract(@\"Detected By: ([^,]+),\",1,SyslogMessage),\n        ZoneNames = split(extract(@\"Zone Names: \\(([^)]+)\\),\",1,SyslogMessage),\",\"),\n        IsMalware = extract(@\"Is Malware: ([^,]+),\",1,SyslogMessage),\n        IsUniqueToCylance = extract(@\"Is Unique To Cylance: ([^,]+),\",1,SyslogMessage),\n        ThreatClassification = extract(@\"Threat Classification: ([^,]+),\",1,SyslogMessage),\n        DeviceId = extract(@\"Device Id: ([^,]+),\",1,SyslogMessage),\n        PolicyName = extract(@\"Policy Name: ([^,]+)(,|$)\",1,SyslogMessage);\nlet DeviceControlEvents = LogHeader\n| where SyslogMessage contains \"DeviceControl\"\n| extend ExtDeviceType = extract(@\"External Device Type: ([^,]+),\",1,SyslogMessage),\n        ExtDeviceVendorId = extract(@\"External Device Vendor ID: ([^,]+),\",1,SyslogMessage),\n        ExtDeviceName = extract(@\"External Device Name: ([^,]+),\",1,SyslogMessage),\n        ExtDeviceProductId = extract(@\"External Device Product ID: ([^,]+),\",1,SyslogMessage),\n        ExtDeviceSerialNumber = extract(@\"External Device Serial Number: ([^,]+),\",1,SyslogMessage),\n        ZoneNames = split(extract(@\"Zone Names: \\(([^)]+)\\)(,|$)\",1,SyslogMessage),\",\"),\n        DeviceId = extract(@\"Device Id: ([^,]+),\",1,SyslogMessage),\n        PolicyName = extract(@\"Policy Name: ([^,]+)(,|$)\",1,SyslogMessage);\nlet AuditLog = LogHeader\n| where SyslogMessage contains \"AuditLog\"\n| extend Provider = extract(@\"Provider: ([^,]+),\",1,SyslogMessage),\n        PolicyChanged = extract(@\"Policy Changed: ([^,]+),\",1,SyslogMessage),\n        ZoneNames = split(extract(@\"Zone: ([^,]+)(,|$)\",1,SyslogMessage),\",\"),\n        UserName = extract(@\"User: ([^,]+)(,|$)\",1,SyslogMessage),\n        DeviceName = extract(@\"Devices?:\\s([\\w\\d\\-\\_]+)\\,\",1,SyslogMessage),\n        SrcIpAddr = split(extract(@\"Source IP: ([\\w\\.\\:]+)\\,\",1,SyslogMessage),\",\");\nlet NoEventType = LogHeader\n| where isempty(SyslogMessage)\n| extend EventType = iif(isempty(EventType),\"Other\",EventType)\n| extend AgentVersion = tostring(parse_json(SyslogMessage).[\"Agent Version\"]),\n        BackgroundDetection = tostring(parse_json(SyslogMessage).[\"Background Detection\"]),\n        EventCreationTime = tostring(parse_json(SyslogMessage).Created),\n        DeviceName = tostring(parse_json(SyslogMessage).[\"Device Name\"]),\n        FilesAnalyzed = toint(parse_json(SyslogMessage).[\"Files Analyzed\"]),\n        SrcIpAddr = split(parse_json(SyslogMessage).[\"IP Addresses\"],\",\"),\n        IsOnline = tostring(parse_json(SyslogMessage).[\"Is Online\"]),\n        LastReportedUser = tostring(parse_json(SyslogMessage).[\"Last Reported User\"]),\n        SrcMacAddr = split(parse_json(SyslogMessage).[\"Mac Addresses\"],\",\"),\n        OsVersion = tostring(parse_json(SyslogMessage).[\"OS Version\"]),\n        OfflineDate = tostring(parse_json(SyslogMessage).[\"Offline Date\"]),\n        OnlineDate = tostring(parse_json(SyslogMessage).[\"Online Date\"]),\n        Policy = tostring(parse_json(SyslogMessage).Policy),\n        SerialNumber = tostring(parse_json(SyslogMessage).[\"Serial Number\"]), \n        Tenant = tostring(parse_json(SyslogMessage).Tenant),\n        ZoneNames = split(parse_json(SyslogMessage).Zones,\",\")\n| extend AvIndustry = tostring(parse_json(SyslogMessage).[\"AV Industry\"]),\n        AccessTime = tostring(parse_json(SyslogMessage).[\"Access Time\"]),\n        AutoRun = tostring(parse_json(SyslogMessage).[\"Auto Run\"]),\n        CertIssuer = tostring(parse_json(SyslogMessage).[\"Cert Issuer\"]),\n        CertPublisher = tostring(parse_json(SyslogMessage).[\"Cert Publisher\"]),\n        CertSubject = tostring(parse_json(SyslogMessage).[\"Cert Subject\"]),\n        CertTimestamp = tostring(parse_json(SyslogMessage).[\"Cert Timestamp\"]),\n        Classification_ = tostring(parse_json(SyslogMessage).Classification),\n        CompanyName = tostring(parse_json(SyslogMessage).[\"Company Name\"]),\n        Copyright = tostring(parse_json(SyslogMessage).Copyright),\n        CreateTime = tostring(parse_json(SyslogMessage).[\"Create Time\"]),\n        CylanceScore = tostring(parse_json(SyslogMessage).[\"Cylance Score\"]),\n        Description = tostring(parse_json(SyslogMessage).Description),\n        DetectedBy = tostring(parse_json(SyslogMessage).[\"Detected By\"]),\n        DriveType = tostring(parse_json(SyslogMessage).[\"Drive Type\"]),\n        EverRun = tostring(parse_json(SyslogMessage).[\"Ever Run\"]),\n        FileName = tostring(parse_json(SyslogMessage).[\"File Name\"]),\n        FileOwner = tostring(parse_json(SyslogMessage).[\"File Owner\"]),\n        FilePath = tostring(parse_json(SyslogMessage).[\"File Path\"]),\n        FileSize = tostring(parse_json(SyslogMessage).[\"File Size (bytes)\"]),\n        FileStatus = tostring(parse_json(SyslogMessage).[\"File Status\"]),\n        FileVersion = tostring(parse_json(SyslogMessage).[\"File Version\"]),\n        FirstFound = tostring(parse_json(SyslogMessage).[\"First Found\"]),\n        GlobalQuarantined = tostring(parse_json(SyslogMessage).[\"Global Quarantined\"]),\n        LastFound = tostring(parse_json(SyslogMessage).[\"Last Found\"]),\n        FileHashMd5 = tostring(parse_json(SyslogMessage).MD5),\n        ModificationTime = tostring(parse_json(SyslogMessage).[\"Modification Time\"]),\n        ProductName = tostring(parse_json(SyslogMessage).[\"Product Name\"]),\n        Running = tostring(parse_json(SyslogMessage).Running),\n        FileHashSha256 = tostring(parse_json(SyslogMessage).SHA256),\n        Safelisted = tostring(parse_json(SyslogMessage).Safelisted),\n        SerialNumber = tostring(parse_json(SyslogMessage).[\"Serial Number\"]),\n        SignatureStatus = tostring(parse_json(SyslogMessage).[\"Signature Status\"]),\n        Signed = tostring(parse_json(SyslogMessage).Signed);\nlet AllOtherEvents = LogHeader\n| where EventType !in (\"Device\", \"ScriptControl\", \"Threat\", \"DeviceControl\", \"AuditLog\", \"Other\");\nunion DeviceEvents, ScriptControlEvents, ThreatEvents, DeviceControlEvents, AuditLog, NoEventType, AllOtherEvents\n| where EventType != \"Other\"\n",
        "version": 1,
        "tags": []
      }
    }
  ]
}
