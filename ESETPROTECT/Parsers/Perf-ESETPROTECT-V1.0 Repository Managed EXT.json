{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "workspace": {
      "type": "String"
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('workspace'), '/(ESETPROTECT')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "eTag": "*",
        "displayName": "ESETPROTECT",
        "category": "Microsoft Sentinel Parser",
        "FunctionAlias": "ESETPROTECT",
        "query": "//\n// Get event data\n//\nlet LogHeader = Syslog\n    | where ProcessName == \"ERAServer\"\n    | project-rename EventProduct = ProcessName \n    | extend EventVendor = \"ESET\",\n        Message = parse_json(SyslogMessage)\n    | extend EventType = Message['event_type'],\n        DvcIpAddr = Message['ipv4'],\n        EventResourceId = Message['source_uuid'],\n        EventCreationTime = make_datetime(Message['occured']),\n        EventSeverity = Message['severity'],\n        DvcHostname = Message['hostname'];\n//\n// Threat events\n//\nlet ThreatEvents = LogHeader\n    | where EventType == \"Threat_Event\"\n    | extend ThreatCategory = Message['threat_type'],\n        ThreatName = Message['threat_name'],\n        ThreatFlags = Message['threat_flags'],\n        EventSubType = Message['scanner_id'],\n        EngineVersion = Message['engine_version'],\n        ObjectType = Message['object_type'],\n        FilePath = Message['object_uri'],\n        EventResult = Message['action_taken'],\n        EventError = Message['action_error'],\n        ScanId = Message['scanner_id'],\n        ThreatHandled = Message['threat_handled'],\n        NeedRestart = Message['need_restart'],\n        ProcessFilePath = Message['processname'],\n        EventMessage = Message['circumstances'],\n        FileHashSha1 = Message['hash'],\n        SrcUserDomain = todynamic(iff(Message['username'] contains '\\\\', split(Message['username'], '\\\\')[0], '')),\n        SrcUserName = todynamic(iff(Message['username'] contains '\\\\', split(Message['username'], '\\\\')[1], Message['username'])),\n        FirstSeen = make_datetime(Message['firstseen']);\n//\n// Firewall Aggregated events\n//\nlet FirewallEvents = LogHeader\n    | where EventType == \"FirewallAggregated_Event\"\n    | extend EventMessage = Message['event'],\n        SrcDvcIpAddr = Message['source_address'],\n        SrcIpIsIpv6 = tobool(iff(Message['source_address_type'] == \"IPv6\", true, false)),\n        SrcPortNumber = Message['source_port'],\n        DstDvcIpAddr = Message['target_address'],\n        DstIpIsIpv6 = tobool(iff(Message['target_address_type'] == \"IPv6\", true, false)),\n        DstPortNumber = Message['target_port'],\n        NetworkProtocol = Message['protocol'],\n        DstUserDomain = todynamic(iff(tobool(Message['inbound']), iff(Message['account'] contains '\\\\', split(Message['account'], '\\\\')[0], ''), '')),\n        DstUserName = todynamic(iff(tobool(Message['inbound']), iff(Message['account'] contains '\\\\', split(Message['account'], '\\\\')[1], Message['account']), '')),\n        SrcUserDomain = todynamic(iff(tobool(Message['inbound']), '', iff(Message['account'] contains '\\\\', split(Message['account'], '\\\\')[0], ''))),\n        SrcUserName = todynamic(iff(tobool(Message['inbound']), '', iff(Message['account'] contains '\\\\', split(Message['account'], '\\\\')[1], Message['account']))),\n        ProcessFilePath = Message['process_name'],\n        NetworkRuleName = Message['rule_name'],\n        NetworkRuleNumber = Message['rule_id'],\n        NetworkDirection = todynamic(iff(tobool(Message['inbound']), \"Inbound\", \"Outbound\")),\n        ThreatName = Message['threat_name'],\n        EventCount = Message['aggregate_count'];\n//\n// Hips events\n//\nlet HipsEvents = LogHeader\n    | where EventType == \"HIPSAggregated_Event\"\n    | extend ProcessFilePath = Message['application'],\n        EventSubType = Message['action'],\n        NetworkRuleName = Message['rule_name'],\n        NetworkRuleNumber = Message['rule_id'],\n        EventCount = Message['aggregate_count'];\n//\n// Audit events\n//\nlet AuditEvents = LogHeader\n    | where EventType == \"Audit_Event\"\n    | extend SrcUserDomain = todynamic(iff(Message['action'] == 'Login attempt', '', Message['domain'])),\n        DstUserDomain = todynamic(iff(Message['action'] != 'Login attempt', '', Message['domain'])),\n        EventSubType = Message['action'],\n        EventMessage = Message['detail'],\n        DstUserName = Message['target'],\n        SrcUserName = Message['user'],\n        EventResult = Message['result'];\n//\n// Enterprise Inspector alert events\n//\nlet EnterpriseInspectorAlertEvents = LogHeader\n    | where EventType == \"EnterpriseInspectorAlert_Event\"\n    | extend ProcessFilePath = Message['processname'],\n        SrcUserDomain = todynamic(iff(Message['username'] contains '\\\\', split(Message['username'], '\\\\')[0], '')),\n        SrcUserName = todynamic(iff(Message['username'] contains '\\\\', split(Message['username'], '\\\\')[1], Message['username'])),\n        NetworkRuleName = Message['rulename'],\n        FileHashSha1 = Message['hash'],\n        EventCount = Message['count'],\n        EventReportUrl = Message['eiconsolelink'];\n//\n// BlockedFiles_Event\n//\nlet BlockedFilesEvents = LogHeader\n    | where EventType == \"BlockedFiles_Event\"\n    | extend ProcessFilePath = Message['processname'],\n        SrcUserDomain = todynamic(iff(Message['username'] contains '\\\\', split(Message['username'], '\\\\')[0], '')),\n        SrcUserName = todynamic(iff(Message['username'] contains '\\\\', split(Message['username'], '\\\\')[1], Message['username'])),\n        ThreatHandled = Message['resolved'],\n        FileHashSha1 = Message['hash'],\n        FilePath = Message['object_uri'],\n        EventSubType = Message['action'],\n        FirstSeen = make_datetime(Message['firstseen']),\n        EventMessage = Message['cause'];\n//\n// Filtered Website events\n//\nlet FilteredWebsiteEvents = LogHeader\n    | where EventType == \"FilteredWebsites_Event\"\n    | extend ProcessFilePath = Message['processname'],\n        SrcUserDomain = todynamic(iff(Message['username'] contains '\\\\', split(Message['username'], '\\\\')[0], '')),\n        SrcUserName = todynamic(iff(Message['username'] contains '\\\\', split(Message['username'], '\\\\')[1], Message['username'])),\n        ThreatHandled = Message['resolved'],\n        FileHashSha1 = Message['hash'],\n        EventMessage = Message['event'],\n        NetworkRuleNumber = Message['rule_id'],\n        EventResult = Message['action_taken'],\n        ScanId = Message['scanner_id'],\n        FilePath = Message['object_uri'],\n        UrlOriginal = Message['target_address'];\n//\n// Format output\n//\nunion ThreatEvents, AuditEvents, FirewallEvents, HipsEvents, BlockedFilesEvents, FilteredWebsiteEvents, EnterpriseInspectorAlertEvents\n| project-away SyslogMessage, Message\n",
        "version": 1,
        "tags": []
      }
    }
  ]
}
