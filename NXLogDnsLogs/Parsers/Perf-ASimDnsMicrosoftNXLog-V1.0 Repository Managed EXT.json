{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "workspace": {
      "type": "String"
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2020-08-01",
      "name": "[concat(parameters('workspace'), '/(ASimDnsMicrosoftNXLog')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "eTag": "*",
        "displayName": "ASimDnsMicrosoftNXLog",
        "category": "Microsoft Sentinel Parser",
        "FunctionAlias": "ASimDnsMicrosoftNXLog",
        "query": "let ASimDnsMicrosoftNXLog = view () {\n  let EventTypeTable=datatable(EventOriginalType:real,EventType:string)[\n      256, 'Query'\n    , 257, 'Query'\n    , 258, 'Query'\n    , 259, 'Query'\n    , 260, 'Query'\n    , 261, 'Query'\n    , 262, 'Query'\n    , 263, 'Dynamic update'\n    , 264, 'Dynamic update'\n    , 265, 'Zone XFR'\n    , 266, 'Zone XFR'\n    , 267, 'Zone XFR'\n    , 268, 'Zone XFR'\n    , 269, 'Zone XFR'\n    , 270, 'Zone XFR'\n    , 271, 'Zone XFR'\n    , 272, 'Zone XFR'\n    , 273, 'Zone XFR'\n    , 274, 'Zone XFR'\n    , 275, 'Zone XFR'\n    , 276, 'Zone XFR'\n    , 277, 'Dynamic update'\n    , 278, 'Dynamic update'\n    , 279, 'Query'\n    , 280, 'Query'\n  ];\n  let EventSubTypeTable=datatable(EventOriginalType:real,EventSubType:string)[\n    256, 'request'\n  , 257, 'response'\n  , 258, 'response'\n  , 259, 'response'\n  , 260, 'request'\n  , 261, 'response'\n  , 262, 'response'\n  , 263, 'request'\n  , 264, 'response'\n  , 265, 'request'\n  , 266, 'request'\n  , 267, 'response'\n  , 268, 'response'\n  , 269, 'request'\n  , 270, 'request'\n  , 271, 'response'\n  , 272, 'response'\n  , 273, 'request'\n  , 274, 'request'\n  , 275, 'response'\n  , 276, 'response'\n  , 277, 'request'\n  , 278, 'response'\n  , 279, 'NA'\n  , 280, 'NA'\n  ];\n  let EventResultTable=datatable(EventOriginalType:real,EventResult:string)[\n      256, 'NA'\n    , 257, 'Success'\n    , 258, 'Failure'\n    , 259, 'Failure'\n    , 260, 'NA'\n    , 261, 'NA'\n    , 262, 'Failure'\n    , 263, 'NA'\n    , 264, 'Based on RCODE'\n    , 265, 'NA'\n    , 266, 'NA'\n    , 267, 'Based on RCODE'\n    , 268, 'Based on RCODE'\n    , 269, 'NA'\n    , 270, 'NA'\n    , 271, 'Based on RCODE'\n    , 272, 'Based on RCODE'\n    , 273, 'NA'\n    , 274, 'NA'\n    , 275, 'Success'\n    , 276, 'Success'\n    , 277, 'NA'\n    , 278, 'Based on RCODE'\n    , 279, 'NA'\n    , 280, 'NA'\n  ];\n  let RCodeTable=datatable(DnsResponseCode:int,ResponseCodeName:string)[\n      0,'NOERROR'\n    , 1,'FORMERR'\n    , 2,'SERVFAIL'\n    , 3,'NXDOMAIN'\n    , 4,'NOTIMP'\n    , 5,'REFUSED'\n    , 6,'YXDOMAIN'\n    , 7,'YXRRSET'\n    , 8,'NXRRSET'\n    , 9,'NOTAUTH'\n    , 10,'NOTZONE'\n    , 11,'DSOTYPENI'\n    , 16,'BADVERS'\n    , 16,'BADSIG'\n    , 17,'BADKEY'\n    , 18,'BADTIME'\n    , 19,'BADMODE'\n    , 20,'BADNAME'\n    , 21,'BADALG'\n    , 22,'BADTRUNC'\n    , 23,'BADCOOKIE'\n  ];\n  let QTypeTable=datatable(DnsQueryType:int,QTypeName:string)[\n      0, 'Reserved'\n    , 1, 'A'\n    , 2, 'NS'\n    , 3, 'MD'\n    , 4, 'MF'\n    , 5, 'CNAME'\n    , 6, 'SOA'\n    , 7, 'MB'\n    , 8 ,'MG'\n    , 9 ,'MR'\n    , 10,'NULL'\n    , 11,'WKS'\n    , 12,'PTR'\n    , 13,'HINFO'\n    , 14,'MINFO'\n    , 15,'MX'\n    , 16,'TXT'\n    , 17,'RP'\n    , 18,'AFSDB'\n    , 19,'X25'\n    , 20,'ISDN'\n    , 21,'RT'\n    , 22,'NSAP'\n    , 23,'NSAP-PTR'\n    , 24,'SIG'\n    , 25,'KEY'\n    , 26,'PX'\n    , 27,'GPOS'\n    , 28,'AAAA'\n    , 29,'LOC'\n    , 30,'NXT'\n    , 31,'EID'\n    , 32,'NIMLOC'\n    , 33,'SRV'\n  ];\n  NXLog_DNS_Server_CL\n  | where EventID_d < 281\n  | project-rename\n      DnsFlags=Flags_s,\n      DnsQuery=QNAME_s,\n      DnsQueryType=QTYPE_s,\n      DnsResponseCode=RCODE_s,\n      DnsResponseName=PacketData_s,\n      Dvc=Hostname_s,\n      DvcIpAddr=HostIP_s,\n      EventOriginalType=EventID_d,\n      EventOriginalUid=GUID_g,\n      EventStartTime=EventTime_t,\n      SrcPortNumber=Port_s,\n      SrcIpAddr=Source_s\n  | extend\n      DnsQuery=trim_end(\".\",DnsQuery),\n      DnsQueryType=toint(DnsQueryType),\n      DnsResponseCode=toint(DnsResponseCode),\n      DvcHostname=Dvc,\n      EventEndTime=EventStartTime,\n      EventProduct=\"Microsoft DNS Server\",\n      EventSchemaVersion=\"0.1.1\",\n      EventVendor=\"Microsoft\",\n      NetworkProtocol=iff(TCP_s == \"0\",\"UDP\",\"TCP\"),\n      TransactionIdHex=tohex(toint(XID_s))\n  | lookup EventTypeTable on EventOriginalType\n  | lookup EventSubTypeTable on EventOriginalType\n  | lookup EventResultTable on EventOriginalType\n  | lookup RCodeTable on DnsResponseCode\n  | lookup QTypeTable on DnsQueryType\n  | extend\n      EventResultDetails = case (isnotempty(ResponseCodeName), ResponseCodeName\n        , DnsResponseCode between (3841 .. 4095), 'Reserved for Private Use'\n        , 'Unassigned')\n  | extend\n      Domain=DnsQuery,\n      DnsResponseCodeName=EventResultDetails,\n      DnsQueryTypeName = case (isnotempty(QTypeName), QTypeName\n        , DnsQueryType between (66 .. 98), 'Unassigned'\n        , DnsQueryType between (110 .. 248), 'Unassigned'\n        , DnsQueryType between (261 .. 32767), 'Unassigned'\n        , 'Unassigned'),\n      EventResult=iff (DnsResponseCode == 0 and EventResult == 'Informational','Success',EventResult)\n  | project-away\n      AA_s,\n      AD_s,\n      AdditionalInfo_s,\n      BufferSize_s,\n      AccountName_s,\n      AccountType_s,\n      CacheScope_s,\n      ChannelID_d,\n      Destination_s,\n      DNSSEC_s,\n      Domain_s,\n      ElapsedTime_s,\n      EventReceivedTime_t,\n      EventType_s,\n      ExecutionProcessID_d,\n      ExecutionThreadID_d,\n      InterfaceIP_s,\n      Keywords_s,\n      OpcodeValue_d,\n      PolicyName_s,\n      ProviderGuid_g,\n      QXID_s,\n      RD_s,\n      Reason_s,\n      RecursionDepth_s,\n      RecursionScope_s,\n      ResponseCodeName,\n      Scope_s,\n      Severity_s,\n      SeverityValue_d,\n      SourceModuleName_s,\n      SourceModuleType_s,\n      SourceName_s,\n      TaskValue_d,\n      TCP_s,\n      UserID_s,\n      Version_d,\n      XID_s,\n      Zone_s\n};\nASimDnsMicrosoftNXLog();\n",
        "version": 1,
        "tags": []
      }
    }
  ]
}
